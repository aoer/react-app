{"version":3,"sources":["UI/PageHeader.js","UI/ThemeToggler/ThemeToggler.js","Clock/ProgressIndicatorSquare.js","Clock/Clock.js","UI/PageFooter.js","UI/PageLayout.js","GuessTheNumber/GuessTheNumberV2.js","Hangman/ShowDrawing.js","Hangman/ShowWord.js","Hangman/Keyboard.js","Hangman/Hangman.js","TableExercise/TableExercise.js","TicTacToe/TicTacToe.js","App.js","reportWebVitals.js","index.js"],"names":["PageHeader","ThemeToggler","ChangeThemeCallBack","useState","togglerTheme","setTogglerTheme","togglerState","setTogglerState","useEffect","prevState","onClick","event","className","ProgressIndicatorSquare","width","height","progress","squareRadius","style","fill","stroke","strokeWidth","opacity","strokeDasharray","strokeDashoffset","x","y","rx","ry","Clock","Date","time","setTime","timeCounterID","setInterval","clearInterval","formatTime","timeNumber","getSeconds","getHours","getMinutes","PageFooter","PageLayout","theme","to","GuessTheNumberV2","min","max","randomNumber","undefined","userInput","gameOver","wrongGuesses","feedBack","guessButtonEnabled","gameState","setGameState","GenerateRandomNumber","Math","floor","random","NumberAlreadyGuessed","number","i","length","guessButton","disabled","newGameButton","onChange","Number","target","value","isNaN","IsValidNumber","type","toString","ShowDrawing","imageIndex","src","process","alt","ShowWord","toGuessChars","guessedChars","gameWonCallBack","gameWon","wordShow","charFound","forEach","tgc","gc","CheckQuess","Keyboard","MainCharacterPressed","ButtonPressed","button","id","split","map","char","Hangman","wordToGuess","gameLost","setGamelost","wrongGuessCount","setWrongGuessCount","wChars","setWrongChars","gChars","setGuessedChars","gameOverClassName","setGameOverClassName","gameWonClassName","setGameWonClassName","UpdateButtonColors","UpdateGameState","correctButtonsToUpdate","wrongButtonsToUpdate","document","getElementById","backgroundColor","CheckWrongGuessCount","CharFound","character","CharAlreadyGuessed","includes","concat","TableHeader","headerKeys","sorting","HeaderClickedCallBack","hkey","index","key","TableSortingIcon","sortAscending","ascending","triangleStyle","viewBox","d","TableBody","properties","CellClickedCallBack","CancelEditCallBack","UpdateCellCallBack","rowData","editState","isEditedCell","rowIndex","headerKey","isEdited","contentTD","TableEdit","onClickTD","rowItem","ri","ci","Table","keys","data","setRowData","setSorting","setEditState","prevRowData","sort","a","b","aValue","toUpperCase","bValue","SortTable","CancelEdit","prevEditState","prevSorting","newRowData","cellValue","setCellValue","onSubmit","preventDefault","TableExercise","props","model","year","color","registration","Board","boardState","CellIcon","cx","cy","r","CellName","row","rindex","cindex","TurnIndicator","NewGame","ResetCallBack","NewGameButton","TicTacToe","setBoardState","reset","setReset","CheckDraw","c","CheckPlayer","player","CheckRow","CheckColumn","CheckDiagonal","CellAlreadyTaken","UpdateBoardState","prevBoardState","column","App","setTheme","path","element","rowCount","columnCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b50fbbfc.chunk.js","sourcesContent":["function PageHeader() {\r\n    return (\r\n        <header>\r\n            <h2>React Component Exercises</h2>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default PageHeader;","import { useState, useEffect } from 'react';\r\nimport './ThemeToggler.css';\r\n\r\nfunction ThemeToggler({ChangeThemeCallBack}) {\r\n    const [togglerTheme, setTogglerTheme] = useState ('theme-toggler');\r\n    const [togglerState, setTogglerState] = useState(false);\r\n    useEffect(() => {\r\n        if (togglerState)\r\n            setTogglerTheme(prevState => prevState = 'theme-toggler theme-toggler-selected');\r\n        else\r\n            setTogglerTheme(prevState => prevState = 'theme-toggler');\r\n\r\n        ChangeThemeCallBack(togglerState);\r\n    }, [togglerState, ChangeThemeCallBack])\r\n\r\n    const ThemeTogglerClicked = (event) => {\r\n        setTogglerState(prevState => prevState = !togglerState)\r\n    }\r\n\r\n    return (\r\n        <span onClick={ThemeTogglerClicked} className={togglerTheme}>\r\n            <span></span>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default ThemeToggler;\r\n","export default function ProgressIndicatorSquare({width, height, progress}) {\r\n    const squareRadius = () => {\r\n        return 2 * height*8/10 + 2 * width*8/10;\r\n    }\r\n\r\n    const squareProgress = () => {\r\n        return squareRadius() - squareRadius() * progress/100;\r\n    }\r\n    \r\n    const style = {\r\n        fill: 'transparent',\r\n        stroke: 'var(--mainColor2)',\r\n        strokeWidth: '10',\r\n        opacity: '0.5',\r\n        strokeDasharray: squareRadius() + 'px',\r\n        strokeDashoffset: squareProgress() + 'px'\r\n    }\r\n    \r\n    return (\r\n        <svg width={width} height={height}>\r\n            <rect x={width/10} y={height/10} rx={height/20} ry={height/20} width={width*8/10} height={height*8/10} style={style} />\r\n        </svg> \r\n    )\r\n}","import {useState, useEffect} from 'react';\r\nimport './ProgressIndicatorSquare';\r\nimport './Clock.css'\r\nimport ProgressIndicatorSquare from './ProgressIndicatorSquare';\r\n\r\nexport default function Clock() {\r\n    // How often clock is refreshed in milliseconds.\r\n    const refreshInterval = 1000;\r\n    \r\n    const [time, setTime] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const timeCounterID = setInterval(() => {\r\n            setTime(() => new Date());\r\n        }, refreshInterval);\r\n\r\n        return () => clearInterval(timeCounterID);\r\n    }, [])\r\n    \r\n    // Transforms minutes and hours into 00 format.\r\n    const formatTime = (timeNumber) => {\r\n        if (timeNumber < 10) {\r\n            return '0' + timeNumber;\r\n        }\r\n        \r\n        return timeNumber;\r\n    }\r\n    \r\n    return(\r\n        <>\r\n            <div className='clock'>\r\n                <ProgressIndicatorSquare width={100} height={50} progress={time.getSeconds()/60*100}/>\r\n                <div className='time'>\r\n                    {formatTime(time.getHours()) + ':' + formatTime(time.getMinutes())}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import ThemeToggler from \"./ThemeToggler/ThemeToggler\";\r\nimport Clock from '../Clock/Clock';\r\n\r\nfunction PageFooter({ChangeThemeCallBack}) {\r\n    return (\r\n        <footer>\r\n            <Clock />\r\n            <label>\r\n                <ThemeToggler ChangeThemeCallBack={ChangeThemeCallBack} />\r\n            </label>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default PageFooter;","import {Outlet, Link} from 'react-router-dom';\r\nimport PageHeader from './PageHeader';\r\nimport PageFooter from './PageFooter';\r\n\r\nfunction PageLayout({theme, ChangeThemeCallBack}) {\r\n    return (\r\n        <>\r\n            <div className={theme}>\r\n                <PageHeader />\r\n                <div className='main-content'>\r\n                    <div className='component-selection'>\r\n                        <nav>\r\n                            <ul>\r\n                                <li>\r\n                                    <Link to='/'>Tic Tac Toe</Link>\r\n                                </li>\r\n                                <li>\r\n                                    <Link to='tableExercise'>Table Exercise</Link>    \r\n                                </li>\r\n                                <li>\r\n                                    <Link to='hangman'>Hangman game</Link>\r\n                                </li>\r\n                                <li>\r\n                                    <Link to='numberguess'>Guess the number game</Link>\r\n                                </li>\r\n                            </ul>\r\n                        </nav>\r\n                    </div>\r\n                    <div className='component-display'>\r\n                        <Outlet />\r\n                    </div>\r\n                </div>\r\n                <PageFooter ChangeThemeCallBack={ChangeThemeCallBack} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PageLayout;","import { useState, useEffect } from 'react';\r\n\r\nfunction GuessTheNumberV2 ({min, max}) {\r\n    const [gameState, setGameState] = useState(() => {\r\n        return {\r\n            randomNumber: undefined,\r\n            userInput: undefined,\r\n            gameOver: false,\r\n            wrongGuesses: [],\r\n            feedBack: '',\r\n            guessButtonEnabled: false\r\n        }\r\n    });\r\n    useEffect(() => {\r\n        setGameState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                randomNumber: prevState.randomNumber = GenerateRandomNumber(min, max),\r\n                feedBack: prevState.feedBack = 'New game started!'\r\n            };\r\n        });\r\n    }, [min, max])\r\n    \r\n    const ResetGame = () => {\r\n        setGameState({\r\n            randomNumber: GenerateRandomNumber(min, max),\r\n            userInput: undefined,\r\n            gameOver: false,\r\n            wrongGuesses: [],\r\n            feedBack: 'New game started!',\r\n            guessButtonEnabled: false\r\n        });\r\n    }\r\n\r\n    const GenerateRandomNumber = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n    }\r\n\r\n    const IsValidNumber = (number) => {\r\n        if (Number.isNaN(number))\r\n            return false;\r\n        if (number < min || number > max)\r\n            return false;\r\n        if (NumberAlreadyGuessed(number))\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    const NumberAlreadyGuessed = (number) => {\r\n        for (let i = 0; i < gameState.wrongGuesses.length; i++) {\r\n            if (gameState.wrongGuesses[i] === number)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const InputGiven = (event) => {\r\n        /* Do not process input when game is over */\r\n        if (gameState.gameOver)\r\n            return;\r\n        \r\n        /* Handle improper input from user */\r\n        let number = Number(event.target.value);\r\n        if (!IsValidNumber(number)) {\r\n            setGameState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    guessButtonEnabled: prevState.guessButtonEnabled = false\r\n                };\r\n            });\r\n            return;\r\n        }\r\n\r\n        /* Handle proper input from user */\r\n        setGameState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                userInput: prevState.userInput = number,\r\n                feedBack: prevState.feedBack = <br/>,\r\n                guessButtonEnabled: prevState.guessButtonEnabled = true\r\n            };\r\n        });\r\n    }\r\n\r\n    const GuessButtonPressed = () => {\r\n        let number = gameState.userInput;\r\n        \r\n        /* Handle correct guess from user */\r\n        if (number === gameState.randomNumber) {\r\n            setGameState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    gameOver: prevState.gameOver = true,\r\n                    feedBack: prevState.feedBack = 'Correct!',\r\n                    guessButtonEnabled: prevState.guessButtonEnabled = false\r\n                };\r\n            });\r\n            return;\r\n        }\r\n        \r\n        /* Handle incorrect guess from user */\r\n        let feedBack\r\n        if (number > gameState.randomNumber)\r\n            feedBack = 'Guess went over.';\r\n        else\r\n            feedBack = 'Guess went under.';\r\n        \r\n        setGameState(prevState => {\r\n            return {\r\n                ...prevState, \r\n                wrongGuesses: [...prevState.wrongGuesses, number], \r\n                feedBack: prevState.feedBack = feedBack,\r\n                guessButtonEnabled: prevState.guessButtonEnabled = false\r\n            };\r\n        })\r\n    }\r\n\r\n    const NewGameButtonPressed = () => {\r\n        ResetGame();\r\n    }\r\n\r\n    const guessButton = <button onClick={GuessButtonPressed} disabled={!gameState.guessButtonEnabled}>Make Guess</button>;\r\n    const newGameButton = <button onClick={NewGameButtonPressed}>New Game</button>;\r\n\r\n    return (\r\n       <div className='GuessTheNumber'>\r\n           <h1>Guess a number beetween {min}-{max}</h1>\r\n            <p>Take a guess:</p>\r\n            <input onChange={InputGiven} type='number' min={min} max={max}></input>\r\n            {gameState.gameOver ? newGameButton : guessButton}\r\n            <p>{gameState.feedBack}</p>\r\n            <p>{gameState.wrongGuesses.length > 0 ? 'Previous guesses:' : ''}</p>\r\n            <p>{gameState.wrongGuesses.toString()}</p>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default GuessTheNumberV2;","function ShowDrawing({imageIndex}) {\r\n    return (\r\n        <div className='ShowDrawing'>\r\n            <img src={process.env.PUBLIC_URL + '/hangman_images/hangman_' + imageIndex + '.png'} alt='hangmanImage'></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowDrawing;","function ShowWord({toGuessChars, guessedChars, gameWonCallBack}) {\r\n    let gameWon = true;\r\n    const CheckQuess = () => {\r\n        let wordShow = '', charFound = false;\r\n        toGuessChars.forEach(tgc => {\r\n            guessedChars.forEach(gc => {\r\n                if (tgc === gc) {\r\n                    wordShow += gc;\r\n                    charFound = true;\r\n                    return\r\n                }\r\n            });\r\n            \r\n            if (!charFound) {\r\n                wordShow += '*';\r\n                gameWon = false;\r\n            } else {\r\n                charFound = false;\r\n            }\r\n        });\r\n\r\n        if(gameWon)\r\n            gameWonCallBack();\r\n        \r\n        return wordShow;\r\n    }\r\n    \r\n    return (\r\n        <div className='ShowWord'>\r\n            <h2>{CheckQuess()}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowWord;","function Keyboard({MainCharacterPressed}) {\r\n    let keyboardCharacters = 'abcdefghijklmnopqrstuvwxyzäö';\r\n    const ButtonPressed = (button) => {\r\n        MainCharacterPressed(button.target.id.split('-')[1]);\r\n    }\r\n    \r\n    const GetButtons = () => {\r\n        return keyboardCharacters.split('').map(char => <button  id={'button-' + char} onClick={ButtonPressed}>{char}</button>);\r\n    }\r\n    \r\n    return (\r\n        <div className='Keyboard'>\r\n            {GetButtons()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Keyboard;","import { useState, useEffect } from 'react';\r\nimport ShowDrawing from './ShowDrawing'\r\nimport ShowWord from './ShowWord';\r\nimport Keyboard from './Keyboard';\r\nimport './Hangman.css';\r\n\r\nfunction Hangman() {\r\n    let wordToGuess = 'hattivatti';\r\n    let [gameLost, setGamelost] = useState(false);\r\n    let gameWon = false;\r\n    let [wrongGuessCount, setWrongGuessCount] = useState(0);\r\n    let [wChars, setWrongChars] = useState([]);\r\n    let [gChars, setGuessedChars] = useState([]);\r\n    let [gameOverClassName, setGameOverClassName] = useState('game-over-invisible');\r\n    let [gameWonClassName, setGameWonClassName] = useState('game-won-invisible');\r\n    useEffect(() => {\r\n        UpdateButtonColors(gChars, wChars);\r\n        UpdateGameState();\r\n    });\r\n\r\n\r\n    const CharacterPressed = (character) => {\r\n        //console.log('Character pressed: ' + character);\r\n        if (gameWon || gameLost)\r\n            return\r\n        \r\n        CharFound(character);\r\n        CheckWrongGuessCount();\r\n    }\r\n\r\n    const UpdateButtonColors = (correctButtonsToUpdate, wrongButtonsToUpdate) => {\r\n        for (let i = 0; i < correctButtonsToUpdate.length; i++ ){\r\n            document.getElementById('button-' + correctButtonsToUpdate[i]).style.backgroundColor = 'green';\r\n        }\r\n        for (let i = 0; i < wrongButtonsToUpdate.length; i++ ){\r\n            document.getElementById('button-' + wrongButtonsToUpdate[i]).style.backgroundColor = 'red';\r\n        }\r\n    }\r\n\r\n    const UpdateGameState = () => {\r\n        if (gameWon) {\r\n            setGameWonClassName('game-won-visible');\r\n        }\r\n        if (gameLost) {\r\n            setGameOverClassName('game-over-visible');\r\n        }            \r\n    }\r\n\r\n    const GameWon = () => {\r\n        gameWon = true;\r\n    }\r\n\r\n    const GameLost = () => {\r\n        setGamelost(true);\r\n    }\r\n\r\n    const CheckWrongGuessCount = () => {\r\n        if (wrongGuessCount >= 9){\r\n            GameLost();\r\n        }\r\n    }\r\n\r\n    const CharFound = (character) => {\r\n        if (CharAlreadyGuessed(character)) \r\n            return\r\n        \r\n        if (wordToGuess.includes(character)) {\r\n            setGuessedChars(prevState => {\r\n                return prevState.concat([character]);\r\n            });\r\n        }else {\r\n            if (wrongGuessCount < 9){\r\n                setWrongGuessCount(++wrongGuessCount);\r\n                setWrongChars(prevState => {\r\n                    return prevState.concat([character]);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const CharAlreadyGuessed = (character) => {\r\n        for (let i = 0; i < gChars.length; i++) {\r\n            if (gChars[i] === character)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n    const ReStart = () => {\r\n        window.location.reload(false);\r\n    }\r\n    */\r\n\r\n    return(\r\n        <div className='Hangman'>\r\n            <h1>Hangman</h1>\r\n            <ShowDrawing imageIndex={wrongGuessCount+1} />\r\n            <ShowWord toGuessChars={wordToGuess.split('')} guessedChars={gChars} gameWonCallBack={GameWon} />\r\n            <Keyboard MainCharacterPressed={CharacterPressed} />\r\n            <div id='GameWon' className={gameWonClassName}>\r\n                <p>Game Won!</p>\r\n            </div>\r\n            <div id='GameOver' className={gameOverClassName}>\r\n                <p>Game Over!</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hangman;","import {useState, useEffect} from 'react';\r\nimport \"./TableExercise.css\";\r\n\r\nfunction TableHeader({headerKeys, id, sorting, HeaderClickedCallBack}) {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {headerKeys.map((hkey, index) => \r\n                    <th key={id + '-h' + index} id={id + '-h' + index} onClick={() => HeaderClickedCallBack(hkey)}>\r\n                        <div className='header-content'>\r\n                            <div className='title-center'>\r\n                                <div>{hkey}</div>\r\n                            </div>\r\n                            {hkey === sorting.key && <TableSortingIcon sortAscending={sorting.ascending} />}\r\n                        </div>\r\n                    </th>\r\n                )}\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nfunction TableSortingIcon({sortAscending}) {\r\n    const rectangleStyle = {\r\n        fill: 'var(--mainColor1)',\r\n        stroke: 'var(--mainColor2)',\r\n        strokeWidth: '5',\r\n        opacity: '1'\r\n    };\r\n\r\n    const triangleStyle = {\r\n        fill: 'var(--mainColor2)',\r\n        opacity: '1'\r\n    };\r\n    \r\n    const triangleUP = () => {\r\n        return <path d=\"M20 80 L50 20 L80 80 Z\" style={triangleStyle} />;\r\n    }\r\n\r\n    const triangleDOWN = () => {\r\n        return <path d=\"M20 20 L50 80 L80 20 Z\" style={triangleStyle} />;\r\n    }\r\n\r\n    return (\r\n        <svg className='sort-icon' viewBox=\"0 0 100 100\">\r\n    \t    <rect x=\"3\" y=\"3\" rx=\"20\" ry=\"20\" width=\"94\" height=\"94\" style={rectangleStyle} />\r\n  \t\t    {sortAscending ? triangleUP() : triangleDOWN()} \r\n\t    </svg>\r\n    );\r\n}\r\n\r\nfunction TableBody({properties, CellClickedCallBack, CancelEditCallBack, UpdateCellCallBack}) {\r\n    const headerKeys = properties.headerKeys,\r\n    rowData = properties.rowData,\r\n    id = properties.id,\r\n    editState = properties.editState;\r\n    \r\n    const isEditedCell = (rowIndex, headerKey) => {\r\n        if (editState.isEdited === true &&\r\n            editState.rowIndex === rowIndex &&\r\n            editState.key === headerKey)\r\n            return true;\r\n\r\n        return false;\r\n    };\r\n    \r\n    const classNameTD = (rowIndex, headerKey) => {\r\n        //console.log([editState.row, rowIndex, editState.key, headerKey]);\r\n        if (isEditedCell(rowIndex, headerKey))\r\n            return 'selected';\r\n        \r\n        return '';\r\n    };\r\n\r\n    const contentTD = (value, rowIndex, headerKey) => {\r\n        if (isEditedCell(rowIndex, headerKey))\r\n            return <TableEdit value={value} UpdateCellCallBack={UpdateCellCallBack} CancelEditCallBack={CancelEditCallBack} />\r\n        \r\n        return value;\r\n    };\r\n\r\n    const onClickTD = (rowIndex, headerKey) => {\r\n        // Remove onClick event from edited cell.\r\n        if (isEditedCell (rowIndex, headerKey))\r\n            return undefined;\r\n        \r\n        return () => CellClickedCallBack(rowIndex, headerKey);\r\n    };\r\n\r\n    return (\r\n        <tbody>\r\n            {rowData.map((rowItem, ri) =>\r\n                <tr key={id + '-r' + ri}>\r\n                    {headerKeys.map((hkey, ci) =>\r\n                        <td key={id + '-d' + ci} className={classNameTD(ri, hkey)} onClick={onClickTD(ri, hkey)}>\r\n                            {contentTD(rowItem[hkey], ri, hkey)}\r\n                        </td>\r\n                    )}\r\n                </tr>\r\n            )}\r\n        </tbody>\r\n    );\r\n}\r\n\r\nfunction Table({keys, data, id}) {\r\n    const [headerKeys] = useState(keys);\r\n    const [rowData, setRowData] = useState(data);\r\n    const [sorting, setSorting] = useState({key: headerKeys[0], ascending: true});\r\n    const [editState, setEditState] = useState ({rowIndex: 0, key: '', value: '', isEdited: false});\r\n\r\n    useEffect(() => {\r\n        const SortTable = (sorting) => {\r\n            setRowData(prevRowData => {\r\n                return [...prevRowData].sort((a, b) => {\r\n                    // Sort upper and lower case strings properly.\r\n                    let aValue = a[sorting.key].toString().toUpperCase(),\r\n                        bValue = b[sorting.key].toString().toUpperCase();\r\n                    \r\n                    // Sort numbers properly.\r\n                    if (Number(aValue) && Number(bValue)) {\r\n                        aValue = Number(aValue);\r\n                        bValue = Number(bValue);\r\n                    }\r\n                       \r\n                    if (aValue === bValue)\r\n                        return 0;\r\n                    if (aValue > bValue)\r\n                        if (sorting.ascending)\r\n                            return 1;\r\n                        else\r\n                            return -1;\r\n                    else\r\n                        if (sorting.ascending)\r\n                            return -1;\r\n                        else\r\n                            return 1;\r\n                });\r\n            });\r\n        };\r\n        \r\n        SortTable(sorting);\r\n    }, [sorting, headerKeys]);\r\n\r\n    const HeaderClicked = (hkey) => {\r\n        //console.log(index);\r\n        setSorting(prevSorting => {\r\n            return {\r\n                ...prevSorting,\r\n                key: hkey,\r\n                ascending: !prevSorting.ascending\r\n            };\r\n        });\r\n    };\r\n\r\n    const CellClicked = (rowIndex, key) => {\r\n        //console.log('cell clicked called!')\r\n        //console.log([rowIndex, key]);\r\n        setEditState(prevEditState => {\r\n            return {\r\n                ...prevEditState,\r\n                rowIndex: rowIndex,\r\n                key: key,\r\n                //value: '',\r\n                isEdited: true\r\n            };\r\n        });\r\n    };\r\n\r\n    const UpdateCell = (value) => {\r\n        //console.log(value);\r\n        setRowData(prevRowData => {\r\n            const newRowData = [...prevRowData];\r\n            newRowData[editState.rowIndex][editState.key] = value;\r\n            return newRowData;\r\n        });\r\n\r\n        CancelEdit();\r\n    }\r\n\r\n    const CancelEdit = () => {\r\n        //console.log('cancel edit called!')\r\n        setEditState(prevEditState => {\r\n            return {\r\n                ...prevEditState,\r\n                isEdited: false\r\n            };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <table id={id}>\r\n            <TableHeader headerKeys={headerKeys} id={id} sorting={sorting} HeaderClickedCallBack={HeaderClicked} />\r\n            <TableBody properties={{headerKeys: headerKeys, rowData: rowData, id: id, editState: editState}} CellClickedCallBack={CellClicked} CancelEditCallBack={CancelEdit} UpdateCellCallBack={UpdateCell} />\r\n        </table>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction TableEdit({value, UpdateCellCallBack, CancelEditCallBack}) {\r\n    const [cellValue, setCellValue] = useState(value);\r\n\r\n    useEffect(() => {\r\n        setCellValue(value);\r\n    }, [value]);\r\n    \r\n    const HandleCellEdit = (event) => {\r\n        event.preventDefault();\r\n        //console.log('Value Submitted: ' + cellValue);\r\n        UpdateCellCallBack(cellValue);\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={HandleCellEdit}>\r\n            <label>\r\n                <input\r\n                    className='cell-edit-field' \r\n                    type='text'\r\n                    value={cellValue}\r\n                    onChange={(event) => setCellValue(event.target.value)}\r\n                />\r\n            </label> \r\n            <input value='Save' type='submit' className='save-input' />\r\n            <button className='cancel-input' onClick={() => CancelEditCallBack()}>Cancel</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nfunction TableExercise(props) {\r\n    const carKeys = ['model', 'year', 'color', 'registration'];\r\n    const cars = [\r\n        {model: 'Tesla', year: 2022, color: 'White', registration: 'ABC-123'},\r\n        {model: 'Ferrari', year: 2022, color: 'Black', registration: 'EFG-123'},\r\n        {model: 'Opel', year: 1999, color: 'Blue', registration: 'VVX-111'},\r\n        {model: 'Citroen', year: 2002, color: 'White', registration: 'HHJ-223'},\r\n        {model: 'Toyota', year: 1990, color: 'Grey', registration: 'YYJ-990'}\r\n    ];\r\n    \r\n    return (\r\n        <div id='table-exercise'>\r\n            <Table keys={carKeys} data={cars} id='tb1' />\r\n            <ul className='notes'>\r\n                <li>* Click row headers to sort table.</li>\r\n                <li>* Click cells to alter their value.</li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableExercise;","import {useState, useEffect} from 'react';\r\nimport './TicTacToe.css';\r\n\r\nfunction Board({boardState, gameState, CellClickedCallBack}) {\r\n    const CellIcon = (value) => {\r\n        const width = '80%', height='80%';\r\n\r\n        switch (value) {\r\n            case 1:\r\n                return (\r\n                    // Circle\r\n                    <svg width={width} height={height}>\r\n                        <circle cx='50%' cy='50%' r='35%' stroke='white' strokeWidth='5' fill='transparent' />  \r\n                    </svg> \r\n                )\r\n            case 2:\r\n                return (\r\n                    /*\r\n                     Cross\r\n                     Original Author: Cheris Weibo\r\n                     License: Free for personal and commercial purpose\r\n                    */\r\n                    <svg width={width} height={height} viewBox='0 0 1024 1024'>\r\n                        <path stroke='white' fill='white' d=\"M810.65984 170.65984q18.3296 0 30.49472 12.16512t12.16512 30.49472q0 18.00192-12.32896 30.33088l-268.67712 268.32896 268.67712 268.32896q12.32896 12.32896 12.32896 30.33088 0 18.3296-12.16512 30.49472t-30.49472 12.16512q-18.00192 0-30.33088-12.32896l-268.32896-268.67712-268.32896 268.67712q-12.32896 12.32896-30.33088 12.32896-18.3296 0-30.49472-12.16512t-12.16512-30.49472q0-18.00192 12.32896-30.33088l268.67712-268.32896-268.67712-268.32896q-12.32896-12.32896-12.32896-30.33088 0-18.3296 12.16512-30.49472t30.49472-12.16512q18.00192 0 30.33088 12.32896l268.32896 268.67712 268.32896-268.67712q12.32896-12.32896 30.33088-12.32896z\"/>\r\n                    </svg>\r\n                )\r\n            default:\r\n                return(<></>)\r\n        }\r\n    }\r\n    \r\n    const CellName = (value) => {\r\n        switch (value) {\r\n            case 1:\r\n                return 'cell-p1-selected'\r\n            case 2:\r\n                return 'cell-p2-selected'\r\n            default:\r\n                if (gameState === 'p1_turn')\r\n                    return 'cell-unselected-p1-turn'\r\n                if (gameState === 'p2_turn')\r\n                    return 'cell-unselected-p2-turn'\r\n        }           \r\n    }\r\n\r\n    return (\r\n        <div className='board'>\r\n            {boardState.map((row, rindex) => \r\n                row.map((value, cindex) =>\r\n                    <div className={CellName(value, gameState)} key={rindex + cindex} onClick={() => CellClickedCallBack(rindex, cindex)}>{CellIcon(value)}</div>\r\n                )\r\n            )}                \r\n        </div> \r\n    );\r\n}\r\n\r\nfunction TurnIndicator({gameState}) {\r\n    const TurnIndicator = (gameState) => {\r\n        switch (gameState) {\r\n            case 'p1_turn':\r\n                return (\r\n                    <div className='turn-indicator turn-indicator-p1'>\r\n                        <div>1st player's turn!</div>\r\n                    </div> \r\n                );\r\n            case 'p2_turn':\r\n                return (\r\n                    <div className='turn-indicator turn-indicator-p2'>\r\n                        <div>2nd player's turn!</div>\r\n                    </div> \r\n                );\r\n            case 'p1_won':\r\n                return (\r\n                    <div className='turn-indicator turn-indicator-p1'>\r\n                        <div>1st player has won!</div>\r\n                    </div> \r\n                );\r\n            case 'p2_won':\r\n                return (\r\n                    <div className='turn-indicator turn-indicator-p2'>\r\n                        <div>2nd player has won!</div>\r\n                    </div> \r\n                );\r\n            case 'draw':\r\n                return (\r\n                    <div className='turn-indicator turn-indicator-draw'>\r\n                        <div>Game ended in draw!</div>\r\n                    </div>\r\n                );\r\n            default:\r\n                return(<></>)\r\n\r\n        }\r\n    }\r\n    \r\n    return TurnIndicator(gameState);\r\n}\r\n\r\nfunction NewGame({gameState, ResetCallBack}) {\r\n    const NewGameButton = (gameState, ResetCallBack) => {\r\n        switch (gameState) {\r\n            case 'p1_won':\r\n            case 'p2_won':\r\n            case 'draw':\r\n                return (\r\n                    <div className='button-new-game' onClick={ResetCallBack} >New Game!</div>\r\n                )\r\n            default:\r\n                return (<></>)\r\n        }\r\n    }\r\n    \r\n    return NewGameButton(gameState, ResetCallBack) \r\n}\r\n\r\nfunction TicTacToe() {\r\n    const [boardState, setBoardState] = useState([]);\r\n    const [gameState, setGameState] = useState();\r\n    const [reset, setReset] = useState();\r\n    \r\n    useEffect(() => {\r\n        setBoardState(() => [[0, 0, 0], [0, 0, 0], [0, 0, 0]]);\r\n        setGameState(() => 'p1_turn');\r\n        setReset(() => false);\r\n    }, [reset]);\r\n\r\n    useEffect(() => {\r\n        const CheckForGameOver = () => {\r\n            if (boardState.length !== 3)\r\n                return\r\n            \r\n            if (CheckPlayer(1)) {\r\n                setGameState(() => 'p1_won');\r\n                return\r\n            }\r\n\r\n            if (CheckPlayer(2)) {\r\n                setGameState(() => 'p2_won');\r\n                return\r\n            }\r\n\r\n            if (CheckDraw()) {\r\n                setGameState(() => 'draw');\r\n                return\r\n            }\r\n        }\r\n\r\n        const CheckDraw = () => {\r\n            for (let r=0; r < boardState.length; r++) {\r\n                for (let c=0; c < boardState[r].length; c++) {\r\n                    if (boardState[r][c] === 0)\r\n                    return false;\r\n                }\r\n            }\r\n            \r\n            return true;\r\n        }\r\n\r\n        const CheckPlayer = (player) => {\r\n            // Check Rows\r\n            for (let r = 0; r < boardState.length; r++)\r\n                if (CheckRow(player, r)) {\r\n                    return true;\r\n                }\r\n            // Check columns\r\n            for (let c = 0; c < boardState[0].length; c++)\r\n                if (CheckColumn(player, c)) {\r\n                    return true;\r\n                }\r\n            // Check diagonal\r\n            if (CheckDiagonal(player)) {\r\n                    return true;\r\n            }\r\n        }\r\n\r\n        const CheckDiagonal = (player) => {\r\n            if (boardState[0][0] === player &&\r\n                boardState[1][1] === player &&\r\n                boardState[2][2] === player) {\r\n                    return true;\r\n            }\r\n\r\n            if (boardState[0][2] === player &&\r\n                boardState[1][1] === player &&\r\n                boardState[2][0] === player) {\r\n                    return true;\r\n            }\r\n        }\r\n\r\n        const CheckColumn = (player, c) => {\r\n            if (boardState[0][c] === player &&\r\n                boardState[1][c] === player &&\r\n                boardState[2][c] === player) {\r\n                    return true;\r\n            }\r\n        }\r\n    \r\n        const CheckRow = (player, r) => {\r\n            if (boardState[r][0] === player &&\r\n                boardState[r][1] === player &&\r\n                boardState[r][2] === player) {\r\n                    return true;\r\n            }\r\n        }\r\n        \r\n        CheckForGameOver();\r\n    }, [boardState]);\r\n    \r\n    const CellClicked = (r, c) => {\r\n        if (CellAlreadyTaken(r, c))\r\n            return; \r\n\r\n        switch (gameState) {\r\n            case 'p1_turn':\r\n                UpdateBoardState(r, c, 1);\r\n                setGameState(() => 'p2_turn');\r\n                break;\r\n            case 'p2_turn':\r\n                UpdateBoardState(r, c, 2);\r\n                setGameState(() => 'p1_turn');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        //console.log('Clicked row: ' + r + ' column: ' + c);\r\n        //console.table(boardState);\r\n    }\r\n\r\n    \r\n\r\n    const CellAlreadyTaken = (r, c) => {\r\n        if (boardState[r][c] !== 0)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    const UpdateBoardState= (r, c, value) => {\r\n        setBoardState(prevBoardState =>\r\n            prevBoardState.map((row, rindex) =>\r\n                row.map((column, cindex) => {\r\n                    if (rindex === r && cindex === c )\r\n                        return value;\r\n                    return column;\r\n                })\r\n            )\r\n        );\r\n    }\r\n\r\n    const Reset = () => {\r\n        setReset(() => true);\r\n        //window.location.reload(false);\r\n    }\r\n    \r\n    return (\r\n        <div id='tic-tac-toe'>\r\n            <TurnIndicator gameState={gameState} />\r\n            <Board boardState={boardState} gameState={gameState} CellClickedCallBack={CellClicked} />\r\n            <NewGame gameState={gameState} ResetCallBack={Reset} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TicTacToe;","import { useState } from 'react';\r\nimport {  HashRouter as BrowserRouter, Routes, Route } from 'react-router-dom';\r\n//import Hello from './SayHello';\r\n//import Tweet from './Tweet'\r\n//import GuessTheNumber from './GuessTheNumber';\r\nimport PageLayout from './UI/PageLayout';\r\n//import PageHeader from './UI/PageHeader';\r\n//import PageFooter from './UI/PageFooter';\r\nimport GuessTheNumberV2 from \"./GuessTheNumber/GuessTheNumberV2\";\r\nimport Hangman from './Hangman/Hangman';\r\nimport TableExercise from \"./TableExercise/TableExercise\";\r\nimport TicTacToe from './TicTacToe/TicTacToe';\r\n//import ComponentSelection from './UI/ComponentSelection';\r\n//import ComponentDisplay from './UI/ComponentDisplay';\r\n//import logo from './logo.svg';\r\n//import Hangman from './Hangman/Hangman';\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  //const [componentNameToDisplay, SetComponentNameToDisplay] = useState('guessTheNumber');\r\n  const [theme, setTheme] = useState ('App theme-dark');\r\n\r\n  /*\r\n  const UserSelected = (name) => {\r\n    //console.log(name);\r\n    SetComponentNameToDisplay(name);\r\n  }\r\n  */\r\n\r\n  const ChangeTheme = (value) => {\r\n    if (value) {\r\n      setTheme('App');\r\n      return;\r\n    }\r\n\r\n    setTheme('App theme-dark');\r\n  }\r\n  \r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path='/' element={<PageLayout theme={theme} ChangeThemeCallBack={ChangeTheme} />}>\r\n          <Route index element={<TicTacToe />} />\r\n          <Route path='tableExercise' element={<TableExercise rowCount={5} columnCount={4} />} />\r\n          <Route path='hangman' element={<Hangman />} />\r\n          <Route path='numberguess' element={<GuessTheNumberV2 min={1} max={10} />} />\r\n          <Route path='*' element={<GuessTheNumberV2 min={1} max={10} />} />\r\n        </Route>\r\n      </Routes>\r\n    </BrowserRouter>\r\n    /*\r\n    <div className={theme}>\r\n      <PageHeader />\r\n      <div className='main-content'>\r\n        <ComponentSelection names={['guessTheNumber', 'hangman', 'TableExercise']} UserSelectedCallBack={UserSelected} />\r\n        <ComponentDisplay name={componentNameToDisplay} />\r\n      </div>\r\n      <PageFooter ChangeThemeCallBack={ChangeTheme} />\r\n    </div>\r\n    */\r\n  );\r\n}\r\n\r\n\r\n/*\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <div className='GuessTheNumbers'>\r\n        <GuessTheNumber />\r\n        <GuessTheNumber min={1} max={50} />\r\n        <GuessTheNumber min={1} max={5} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n/*\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <div className='Tweets'>\r\n        <Tweet name='Pure Clickbait' message='Please click me..' likesCount={5670}/>\r\n        <Tweet name='End is near..' message='The world ends at 5pm..' likesCount={120}/>\r\n        <Tweet name='Winter is coming' message='I am the only true king.' likesCount={67900}/>\r\n        <Tweet name='WTF Japan' message='Oh lord...' likesCount={99}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}