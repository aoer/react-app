{"version":3,"sources":["GuessTheNumberGame.js","GuessTheNumber.js","Hangman/ShowDrawing.js","Hangman/ShowWord.js","Hangman/Keyboard.js","Hangman/Hangman.js","App.js","reportWebVitals.js","index.js"],"names":["GuessTheNumberGame","min","max","undefined","this","secretNumber","guessedNumbers","guessedNumbersOutput","output","i","length","messageOutput","gameEnded","StartGame","RandomInt","Math","floor","random","number","Number","isNaN","NumberAlreadyGuessed","push","IsValidGuess","GuessTheNumber","useState","gtnGame","setGtnGame","userInput","setUserInput","wrongGuesses","setWrongGuesses","setMessageOutput","className","onChange","event","target","value","console","log","onClick","CheckIfCorrect","table","defaultProps","ShowDrawing","imageIndex","src","process","alt","ShowWord","toGuessChars","guessedChars","gameWonCallBack","gameWon","wordShow","charFound","forEach","tgc","gc","CheckQuess","Keyboard","MainCharacterPressed","ButtonPressed","button","id","split","map","char","Hangman","wordToGuess","gameLost","setGamelost","wrongGuessCount","setWrongGuessCount","wChars","setWrongChars","gChars","setGuessedChars","gameOverClassName","setGameOverClassName","gameWonClassName","setGameWonClassName","useEffect","UpdateButtonColors","UpdateGameState","correctButtonsToUpdate","wrongButtonsToUpdate","document","getElementById","style","backgroundColor","CheckWrongGuessCount","CharFound","character","CharAlreadyGuessed","includes","prevState","concat","ReStart","window","location","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.32770b65.chunk.js","sourcesContent":["class GuessTheNumberGame {\r\n    constructor(min, max) {\r\n        if (min === undefined || max === undefined) {\r\n            this.min = 1;\r\n            this.max = 100;\r\n        } else {\r\n            this.min = min;\r\n            this.max = max;\r\n        }\r\n        \r\n        this.secretNumber = undefined;\r\n        this.guessedNumbers = [];\r\n        this.guessedNumbersOutput = () => {\r\n            let output = '';\r\n            for (let i=0; i < this.guessedNumbers.length; i++) {\r\n                output += this.guessedNumbers[i] + ' ';\r\n            }\r\n            return output;\r\n        };\r\n        this.messageOutput = '';\r\n        this.gameEnded = false;\r\n        this.StartGame();\r\n    }\r\n\r\n    StartGame() {\r\n        this.secretNumber = this.RandomInt(this.min,this.max);\r\n    }\r\n\r\n    RandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n    }\r\n\r\n    IsValidGuess(number) {\r\n        if (Number.isNaN(number))\r\n            return false;\r\n        if (number < this.min || number > this.max)\r\n            return false;\r\n        if (this.NumberAlreadyGuessed(number))\r\n            return false;\r\n\r\n        this.guessedNumbers.push(number);\r\n        return true;\r\n    }\r\n\r\n    NumberAlreadyGuessed(number) {\r\n        for (let i = 0; i < this.guessedNumbers.length; i++) {\r\n            if (this.guessedNumbers[i] === number)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    CheckIfCorrect(number) {\r\n        number = Number(number);\r\n        if(!this.IsValidGuess(number)){\r\n            return;\r\n        }\r\n\r\n        if (this.secretNumber === number) {\r\n            this.messageOutput = 'Arvausten määrä: ' + this.guessedNumbers.length;\r\n            this.gameEnded = true;\r\n        } else {\r\n            if(this.secretNumber > number){\r\n                this.messageOutput = 'Arvaus meni ali';\r\n            } else {\r\n                this.messageOutput = 'Arvaus meni yli';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default GuessTheNumberGame;","/* \"Import React from 'react'\" no longer needed, unless using class based react component implementation */\r\n//import React, { useState } from 'react';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GuessTheNumberGame from './GuessTheNumberGame';\r\n\r\nfunction GuessTheNumber({min, max}) {\r\n    const [gtnGame, setGtnGame] = useState(new GuessTheNumberGame(min, max));\r\n    const [userInput, setUserInput] = useState('');\r\n    const [wrongGuesses, setWrongGuesses] = useState('');\r\n    const [messageOutput, setMessageOutput] = useState('');\r\n    const onChange = (event) => {\r\n        setUserInput(event.target.value);\r\n        if(gtnGame.gameEnded === true) {\r\n            setGtnGame(new GuessTheNumberGame(min, max));\r\n            setWrongGuesses('');\r\n            setMessageOutput('');\r\n        }\r\n\r\n        console.log('input field changed:' + event.target.value);\r\n    };\r\n    const MakeGuess = () => {\r\n        gtnGame.CheckIfCorrect(userInput);\r\n        setWrongGuesses(gtnGame.guessedNumbersOutput());\r\n        setMessageOutput(gtnGame.messageOutput);\r\n\r\n        console.log('secretNumber:' + gtnGame.secretNumber);\r\n        console.table(gtnGame.guessedNumbers);\r\n    }\r\n\r\n    return (\r\n        <div className='GuessTheNumber'>\r\n            <h1>Arvaa luku väliltä {min}-{max}</h1>\r\n            <p>Arvaus</p>\r\n            <input /*value={userInput}*/ onChange={onChange}></input>\r\n            <button onClick={MakeGuess}>arvaa</button>\r\n            <p>{messageOutput}</p>\r\n            <p>{wrongGuesses}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nGuessTheNumber.defaultProps = {\r\n    min: 1,\r\n    max: 100,\r\n}\r\n\r\nGuessTheNumber.propTypes = {\r\n    min: PropTypes.number.isRequired,\r\n    max: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default GuessTheNumber;","function ShowDrawing({imageIndex}) {\r\n    return (\r\n        <div className='ShowDrawing'>\r\n            <img src={process.env.PUBLIC_URL + '/hangman_images/hangman_' + imageIndex + '.png'} alt='hangmanImage'></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowDrawing;","function ShowWord({toGuessChars, guessedChars, gameWonCallBack}) {\r\n    let gameWon = true;\r\n    const CheckQuess = () => {\r\n        let wordShow = '', charFound = false;\r\n        toGuessChars.forEach(tgc => {\r\n            guessedChars.forEach(gc => {\r\n                if (tgc === gc) {\r\n                    wordShow += gc;\r\n                    charFound = true;\r\n                    return\r\n                }\r\n            });\r\n            \r\n            if (!charFound) {\r\n                wordShow += '*';\r\n                gameWon = false;\r\n            } else {\r\n                charFound = false;\r\n            }\r\n        });\r\n\r\n        if(gameWon)\r\n            gameWonCallBack();\r\n        \r\n        return wordShow;\r\n    }\r\n    \r\n    return (\r\n        <div className='ShowWord'>\r\n            <h2>{CheckQuess()}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowWord;","function Keyboard({MainCharacterPressed}) {\r\n    let keyboardCharacters = 'abcdefghijklmnopqrstuvwxyzäö';\r\n    const ButtonPressed = (button) => {\r\n        MainCharacterPressed(button.target.id.split('-')[1]);\r\n    }\r\n    \r\n    const GetButtons = () => {\r\n        return keyboardCharacters.split('').map(char => <button  id={'button-' + char} onClick={ButtonPressed}>{char}</button>);\r\n    }\r\n    \r\n    return (\r\n        <div className='Keyboard'>\r\n            {GetButtons()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Keyboard;","import { useState, useEffect } from 'react';\r\nimport ShowDrawing from './ShowDrawing'\r\nimport ShowWord from './ShowWord';\r\nimport Keyboard from './Keyboard';\r\nimport './Hangman.css';\r\n\r\nfunction Hangman() {\r\n    let wordToGuess = 'hattivatti';\r\n    let [gameLost, setGamelost] = useState(false);\r\n    let gameWon = false;\r\n    let [wrongGuessCount, setWrongGuessCount] = useState(0);\r\n    let [wChars, setWrongChars] = useState([]);\r\n    let [gChars, setGuessedChars] = useState([]);\r\n    let [gameOverClassName, setGameOverClassName] = useState('game-over-invisible');\r\n    let [gameWonClassName, setGameWonClassName] = useState('game-won-invisible');\r\n    useEffect(() => {\r\n        UpdateButtonColors(gChars, wChars);\r\n        UpdateGameState();\r\n    });\r\n\r\n\r\n    const CharacterPressed = (character) => {\r\n        //console.log('Character pressed: ' + character);\r\n        if (gameWon || gameLost)\r\n            return\r\n        \r\n        CharFound(character);\r\n        CheckWrongGuessCount();\r\n    }\r\n\r\n    const UpdateButtonColors = (correctButtonsToUpdate, wrongButtonsToUpdate) => {\r\n        for (let i = 0; i < correctButtonsToUpdate.length; i++ ){\r\n            document.getElementById('button-' + correctButtonsToUpdate[i]).style.backgroundColor = 'green';\r\n        }\r\n        for (let i = 0; i < wrongButtonsToUpdate.length; i++ ){\r\n            document.getElementById('button-' + wrongButtonsToUpdate[i]).style.backgroundColor = 'red';\r\n        }\r\n    }\r\n\r\n    const UpdateGameState = () => {\r\n        if (gameWon) {\r\n            setGameWonClassName('game-won-visible');\r\n        }\r\n        if (gameLost) {\r\n            setGameOverClassName('game-over-visible');\r\n        }            \r\n    }\r\n\r\n    const GameWon = () => {\r\n        gameWon = true;\r\n    }\r\n\r\n    const GameLost = () => {\r\n        setGamelost(true);\r\n    }\r\n\r\n    const CheckWrongGuessCount = () => {\r\n        if (wrongGuessCount >= 9){\r\n            GameLost();\r\n        }\r\n    }\r\n\r\n    const CharFound = (character) => {\r\n        if (CharAlreadyGuessed(character)) \r\n            return\r\n        \r\n        if (wordToGuess.includes(character)) {\r\n            setGuessedChars(prevState => {\r\n                return prevState.concat([character]);\r\n            });\r\n        }else {\r\n            if (wrongGuessCount < 9){\r\n                setWrongGuessCount(++wrongGuessCount);\r\n                setWrongChars(prevState => {\r\n                    return prevState.concat([character]);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const CharAlreadyGuessed = (character) => {\r\n        for (let i = 0; i < gChars.length; i++) {\r\n            if (gChars[i] === character)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const ReStart = () => {\r\n        window.location.reload(false);\r\n    }\r\n\r\n    return(\r\n        <div className='Hangman'>\r\n            <h1>Hangman</h1>\r\n            <ShowDrawing imageIndex={wrongGuessCount+1} />\r\n            <ShowWord toGuessChars={wordToGuess.split('')} guessedChars={gChars} gameWonCallBack={GameWon} />\r\n            <Keyboard MainCharacterPressed={CharacterPressed} />\r\n            <div id='GameWon' className={gameWonClassName}>\r\n                <p>Game Won!</p>\r\n                <button onClick={ReStart}>New Game</button>\r\n            </div>\r\n            <div id='GameOver' className={gameOverClassName}>\r\n                <p>Game Over!</p>\r\n                <button onClick={ReStart}>New Game</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hangman;","import React from 'react';\n//import Hello from './SayHello';\n//import Tweet from './Tweet'\nimport GuessTheNumber from './GuessTheNumber';\n//import logo from './logo.svg';\nimport Hangman from './Hangman/Hangman';\nimport './App.css'\n\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Hangman />\n      <GuessTheNumber min={1} max={5} />\n    </div>\n  );\n}\n\n\n/*\nfunction App() {\n  \n  return (\n    <div className='App'>\n      <div className='GuessTheNumbers'>\n        <GuessTheNumber />\n        <GuessTheNumber min={1} max={50} />\n        <GuessTheNumber min={1} max={5} />\n      </div>\n    </div>\n  );\n}\n*/\n\n/*\nfunction App() {\n  \n  return (\n    <div className='App'>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <div className='Tweets'>\n        <Tweet name='Pure Clickbait' message='Please click me..' likesCount={5670}/>\n        <Tweet name='End is near..' message='The world ends at 5pm..' likesCount={120}/>\n        <Tweet name='Winter is coming' message='I am the only true king.' likesCount={67900}/>\n        <Tweet name='WTF Japan' message='Oh lord...' likesCount={99}/>\n      </div>\n    </div>\n  );\n}\n*/\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}