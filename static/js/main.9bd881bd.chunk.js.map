{"version":3,"sources":["UI/PageHeader.js","UI/ThemeToggler/ThemeToggler.js","UI/PageFooter.js","UI/ComponentSelection.js","Hangman/ShowDrawing.js","Hangman/ShowWord.js","Hangman/Keyboard.js","Hangman/Hangman.js","GuessTheNumber/GuessTheNumberV2.js","TableExercise/TableData.js","TableExercise/TableExercise.js","UI/ComponentDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["PageHeader","ThemeToggler","ChangeThemeCallBack","useState","togglerTheme","setTogglerTheme","togglerState","setTogglerState","useEffect","prevState","onClick","event","className","PageFooter","ComponentSelection","names","UserSelectedCallBack","map","name","ShowDrawing","imageIndex","src","process","alt","ShowWord","toGuessChars","guessedChars","gameWonCallBack","gameWon","wordShow","charFound","forEach","tgc","gc","CheckQuess","Keyboard","MainCharacterPressed","ButtonPressed","button","target","id","split","char","Hangman","wordToGuess","gameLost","setGamelost","wrongGuessCount","setWrongGuessCount","wChars","setWrongChars","gChars","setGuessedChars","gameOverClassName","setGameOverClassName","gameWonClassName","setGameWonClassName","UpdateButtonColors","UpdateGameState","correctButtonsToUpdate","wrongButtonsToUpdate","i","length","document","getElementById","style","backgroundColor","CheckWrongGuessCount","CharFound","character","CharAlreadyGuessed","includes","concat","ReStart","window","location","reload","GuessTheNumberV2","min","max","randomNumber","undefined","userInput","gameOver","wrongGuesses","feedBack","guessButtonEnabled","gameState","setGameState","GenerateRandomNumber","Math","floor","random","NumberAlreadyGuessed","number","guessButton","disabled","newGameButton","onChange","Number","value","isNaN","IsValidNumber","type","toString","TableData","rowCount","columnCount","this","header","rows","initDefaultTable","c","r","row","column","isValidRow","isValidColumn","rowNumber","columnNumber","TableHeader","headerData","hItem","TableRows","rowData","rItem","TableColumns","columnData","CellSelected","cells","getElementsByTagName","console","log","ClearPreviousCellSelections","cItem","Table","tableData","getHeaderData","getRowData","TableExercise","props","tData","setCell","setRow","setColumn","ComponentDisplay","GetComponentToDisplay","App","componentNameToDisplay","SetComponentNameToDisplay","theme","setTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9bd881bd.chunk.js","sourcesContent":["function PageHeader() {\r\n    return (\r\n        <header>\r\n            <h2>React Component Exercises</h2>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default PageHeader;","import { useState, useEffect } from 'react';\r\nimport './ThemeToggler.css';\r\n\r\nfunction ThemeToggler({ChangeThemeCallBack}) {\r\n    const [togglerTheme, setTogglerTheme] = useState ('theme-toggler');\r\n    const [togglerState, setTogglerState] = useState(false);\r\n    useEffect(() => {\r\n        if (togglerState)\r\n            setTogglerTheme(prevState => prevState = 'theme-toggler theme-toggler-selected');\r\n        else\r\n            setTogglerTheme(prevState => prevState = 'theme-toggler');\r\n\r\n        ChangeThemeCallBack(togglerState);\r\n    }, [togglerState, ChangeThemeCallBack])\r\n\r\n    const ThemeTogglerClicked = (event) => {\r\n        setTogglerState(prevState => prevState = !togglerState)\r\n    }\r\n\r\n    return (\r\n        <span onClick={ThemeTogglerClicked} className={togglerTheme}>\r\n            <span></span>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default ThemeToggler;\r\n","import ThemeToggler from \"./ThemeToggler/ThemeToggler\";\r\n\r\nfunction PageFooter({ChangeThemeCallBack}) {\r\n    return (\r\n        <footer>\r\n            <span>TODO Footer..</span>\r\n            <label>\r\n                <p>Change Theme:</p>\r\n                <ThemeToggler ChangeThemeCallBack={ChangeThemeCallBack} />\r\n            </label>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default PageFooter;","function ComponentSelection({names, UserSelectedCallBack}) {\r\n    const GetSelections = () => {\r\n        return names.map(name => <div className='selection' onClick={() => UserSelectedCallBack(name)}>{name}</div>);\r\n    }\r\n    \r\n    return (\r\n        <div className='component-selection'>\r\n            {GetSelections()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ComponentSelection;","function ShowDrawing({imageIndex}) {\r\n    return (\r\n        <div className='ShowDrawing'>\r\n            <img src={process.env.PUBLIC_URL + '/hangman_images/hangman_' + imageIndex + '.png'} alt='hangmanImage'></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowDrawing;","function ShowWord({toGuessChars, guessedChars, gameWonCallBack}) {\r\n    let gameWon = true;\r\n    const CheckQuess = () => {\r\n        let wordShow = '', charFound = false;\r\n        toGuessChars.forEach(tgc => {\r\n            guessedChars.forEach(gc => {\r\n                if (tgc === gc) {\r\n                    wordShow += gc;\r\n                    charFound = true;\r\n                    return\r\n                }\r\n            });\r\n            \r\n            if (!charFound) {\r\n                wordShow += '*';\r\n                gameWon = false;\r\n            } else {\r\n                charFound = false;\r\n            }\r\n        });\r\n\r\n        if(gameWon)\r\n            gameWonCallBack();\r\n        \r\n        return wordShow;\r\n    }\r\n    \r\n    return (\r\n        <div className='ShowWord'>\r\n            <h2>{CheckQuess()}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowWord;","function Keyboard({MainCharacterPressed}) {\r\n    let keyboardCharacters = 'abcdefghijklmnopqrstuvwxyzäö';\r\n    const ButtonPressed = (button) => {\r\n        MainCharacterPressed(button.target.id.split('-')[1]);\r\n    }\r\n    \r\n    const GetButtons = () => {\r\n        return keyboardCharacters.split('').map(char => <button  id={'button-' + char} onClick={ButtonPressed}>{char}</button>);\r\n    }\r\n    \r\n    return (\r\n        <div className='Keyboard'>\r\n            {GetButtons()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Keyboard;","import { useState, useEffect } from 'react';\r\nimport ShowDrawing from './ShowDrawing'\r\nimport ShowWord from './ShowWord';\r\nimport Keyboard from './Keyboard';\r\nimport './Hangman.css';\r\n\r\nfunction Hangman() {\r\n    let wordToGuess = 'hattivatti';\r\n    let [gameLost, setGamelost] = useState(false);\r\n    let gameWon = false;\r\n    let [wrongGuessCount, setWrongGuessCount] = useState(0);\r\n    let [wChars, setWrongChars] = useState([]);\r\n    let [gChars, setGuessedChars] = useState([]);\r\n    let [gameOverClassName, setGameOverClassName] = useState('game-over-invisible');\r\n    let [gameWonClassName, setGameWonClassName] = useState('game-won-invisible');\r\n    useEffect(() => {\r\n        UpdateButtonColors(gChars, wChars);\r\n        UpdateGameState();\r\n    });\r\n\r\n\r\n    const CharacterPressed = (character) => {\r\n        //console.log('Character pressed: ' + character);\r\n        if (gameWon || gameLost)\r\n            return\r\n        \r\n        CharFound(character);\r\n        CheckWrongGuessCount();\r\n    }\r\n\r\n    const UpdateButtonColors = (correctButtonsToUpdate, wrongButtonsToUpdate) => {\r\n        for (let i = 0; i < correctButtonsToUpdate.length; i++ ){\r\n            document.getElementById('button-' + correctButtonsToUpdate[i]).style.backgroundColor = 'green';\r\n        }\r\n        for (let i = 0; i < wrongButtonsToUpdate.length; i++ ){\r\n            document.getElementById('button-' + wrongButtonsToUpdate[i]).style.backgroundColor = 'red';\r\n        }\r\n    }\r\n\r\n    const UpdateGameState = () => {\r\n        if (gameWon) {\r\n            setGameWonClassName('game-won-visible');\r\n        }\r\n        if (gameLost) {\r\n            setGameOverClassName('game-over-visible');\r\n        }            \r\n    }\r\n\r\n    const GameWon = () => {\r\n        gameWon = true;\r\n    }\r\n\r\n    const GameLost = () => {\r\n        setGamelost(true);\r\n    }\r\n\r\n    const CheckWrongGuessCount = () => {\r\n        if (wrongGuessCount >= 9){\r\n            GameLost();\r\n        }\r\n    }\r\n\r\n    const CharFound = (character) => {\r\n        if (CharAlreadyGuessed(character)) \r\n            return\r\n        \r\n        if (wordToGuess.includes(character)) {\r\n            setGuessedChars(prevState => {\r\n                return prevState.concat([character]);\r\n            });\r\n        }else {\r\n            if (wrongGuessCount < 9){\r\n                setWrongGuessCount(++wrongGuessCount);\r\n                setWrongChars(prevState => {\r\n                    return prevState.concat([character]);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const CharAlreadyGuessed = (character) => {\r\n        for (let i = 0; i < gChars.length; i++) {\r\n            if (gChars[i] === character)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const ReStart = () => {\r\n        window.location.reload(false);\r\n    }\r\n\r\n    return(\r\n        <div className='Hangman'>\r\n            <h1>Hangman</h1>\r\n            <ShowDrawing imageIndex={wrongGuessCount+1} />\r\n            <ShowWord toGuessChars={wordToGuess.split('')} guessedChars={gChars} gameWonCallBack={GameWon} />\r\n            <Keyboard MainCharacterPressed={CharacterPressed} />\r\n            <div id='GameWon' className={gameWonClassName}>\r\n                <p>Game Won!</p>\r\n                <button onClick={ReStart}>New Game</button>\r\n            </div>\r\n            <div id='GameOver' className={gameOverClassName}>\r\n                <p>Game Over!</p>\r\n                <button onClick={ReStart}>New Game</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hangman;","import { useState, useEffect } from 'react';\r\n\r\nfunction GuessTheNumberV2 ({min, max}) {\r\n    const [gameState, setGameState] = useState(() => {\r\n        return {\r\n            randomNumber: undefined,\r\n            userInput: undefined,\r\n            gameOver: false,\r\n            wrongGuesses: [],\r\n            feedBack: '',\r\n            guessButtonEnabled: false\r\n        }\r\n    });\r\n    useEffect(() => {\r\n        setGameState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                randomNumber: prevState.randomNumber = GenerateRandomNumber(min, max),\r\n                feedBack: prevState.feedBack = 'New game started!'\r\n            };\r\n        });\r\n    }, [min, max])\r\n    \r\n    const ResetGame = () => {\r\n        setGameState({\r\n            randomNumber: GenerateRandomNumber(min, max),\r\n            userInput: undefined,\r\n            gameOver: false,\r\n            wrongGuesses: [],\r\n            feedBack: 'New game started!',\r\n            guessButtonEnabled: false\r\n        });\r\n    }\r\n\r\n    const GenerateRandomNumber = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n    }\r\n\r\n    const IsValidNumber = (number) => {\r\n        if (Number.isNaN(number))\r\n            return false;\r\n        if (number < min || number > max)\r\n            return false;\r\n        if (NumberAlreadyGuessed(number))\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    const NumberAlreadyGuessed = (number) => {\r\n        for (let i = 0; i < gameState.wrongGuesses.length; i++) {\r\n            if (gameState.wrongGuesses[i] === number)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const InputGiven = (event) => {\r\n        /* Do not process input when game is over */\r\n        if (gameState.gameOver)\r\n            return;\r\n        \r\n        /* Handle improper input from user */\r\n        let number = Number(event.target.value);\r\n        if (!IsValidNumber(number)) {\r\n            setGameState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    guessButtonEnabled: prevState.guessButtonEnabled = false\r\n                };\r\n            });\r\n            return;\r\n        }\r\n\r\n        /* Handle proper input from user */\r\n        setGameState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                userInput: prevState.userInput = number,\r\n                feedBack: prevState.feedBack = <br/>,\r\n                guessButtonEnabled: prevState.guessButtonEnabled = true\r\n            };\r\n        });\r\n    }\r\n\r\n    const GuessButtonPressed = () => {\r\n        let number = gameState.userInput;\r\n        \r\n        /* Handle correct guess from user */\r\n        if (number === gameState.randomNumber) {\r\n            setGameState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    gameOver: prevState.gameOver = true,\r\n                    feedBack: prevState.feedBack = 'Correct!',\r\n                    guessButtonEnabled: prevState.guessButtonEnabled = false\r\n                };\r\n            });\r\n            return;\r\n        }\r\n        \r\n        /* Handle incorrect guess from user */\r\n        let feedBack\r\n        if (number > gameState.randomNumber)\r\n            feedBack = 'Guess went over.';\r\n        else\r\n            feedBack = 'Guess went under.';\r\n        \r\n        setGameState(prevState => {\r\n            return {\r\n                ...prevState, \r\n                wrongGuesses: [...prevState.wrongGuesses, number], \r\n                feedBack: prevState.feedBack = feedBack,\r\n                guessButtonEnabled: prevState.guessButtonEnabled = false\r\n            };\r\n        })\r\n    }\r\n\r\n    const NewGameButtonPressed = () => {\r\n        ResetGame();\r\n    }\r\n\r\n    const guessButton = <button onClick={GuessButtonPressed} disabled={!gameState.guessButtonEnabled}>Make Guess</button>;\r\n    const newGameButton = <button onClick={NewGameButtonPressed}>New Game</button>;\r\n\r\n    return (\r\n       <div className='GuessTheNumber'>\r\n           <h1>Guess a number beetween {min}-{max}</h1>\r\n            <p>Take a guess:</p>\r\n            <input onChange={InputGiven} type='number' min={min} max={max}></input>\r\n            {gameState.gameOver ? newGameButton : guessButton}\r\n            <p>{gameState.feedBack}</p>\r\n            <p>{gameState.wrongGuesses.length > 0 ? 'Previous guesses:' : ''}</p>\r\n            <p>{gameState.wrongGuesses.toString()}</p>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default GuessTheNumberV2;","class TableData {\r\n    constructor(rowCount, columnCount) {\r\n        this.rowCount = rowCount;\r\n        this.columnCount = columnCount;\r\n        this.header = [];\r\n        this.rows = [];\r\n        this.initDefaultTable();\r\n    };\r\n\r\n    initDefaultTable() {\r\n        for(let c=0; c<this.columnCount; c++) {\r\n            this.header[c] ='Default Header ' + c;\r\n        }\r\n\r\n        for(let r=0;r<this.rowCount; r++) {\r\n            let row = [];\r\n            for(let c=0; c<this.columnCount; c++) {\r\n                row[c] ='Default Cell ' + r + ' ' + c;\r\n            }\r\n            \r\n            this.rows[r] = row; \r\n        }\r\n\r\n    }\r\n\r\n    getHeaderData() {\r\n        return this.header;\r\n    }\r\n\r\n    getRowData() {\r\n        return this.rows;\r\n    }\r\n\r\n    setCell(row, column, value) {\r\n        if (!this.isValidRow(row) || !this.isValidColumn(column))\r\n            return;\r\n        this.rows[row][column] = value;\r\n    }\r\n\r\n    setRow(row, value) {\r\n        if (!this.isValidRow(row))\r\n            return;\r\n        for (let i=0; i < this.rows[row].length; i++) {\r\n            this.rows[row][i] = value;\r\n        }       \r\n    }\r\n\r\n    setColumn(column, value) {\r\n        if (!this.isValidColumn(column))\r\n            return;\r\n        for (let r=0; r < this.rows.length; r++) {\r\n            this.rows[r][column] = value;\r\n        }\r\n    }\r\n\r\n    isValidRow(rowNumber) {\r\n        if (rowNumber < 0 || rowNumber >= this.rowCount)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    isValidColumn(columnNumber) {\r\n        if (columnNumber < 0 || columnNumber >= this.columnCount)\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default TableData;","import TableData from \"./TableData\";\r\nimport \"./TableExercise.css\";\r\n\r\nfunction TableHeader({headerData}) {\r\n    return headerData.map((hItem) => <th>{hItem}</th>);\r\n}\r\n\r\nfunction TableRows({rowData, id}) {\r\n    return rowData.map((rItem) => <tr><TableColumns columnData={rItem} id={id}/></tr>);\r\n}\r\n\r\nfunction TableColumns({columnData, id}) {\r\n    const ClearPreviousCellSelections = () => {\r\n        let cells = document.getElementById(id).getElementsByTagName('td');\r\n        console.log(cells);\r\n        for (let i = 0; i < cells.length; i++) {\r\n            cells[i].className = '';\r\n        }\r\n    }\r\n    \r\n    const CellSelected = (event) => {\r\n        // Select/Deselect table cell\r\n        ClearPreviousCellSelections();\r\n        if(event.target.className === ''){\r\n            event.target.className = 'selected';\r\n        }else if (event.target.className === 'selected'){\r\n            event.target.className = '';\r\n        }\r\n        //console.log(event);\r\n    }\r\n\r\n    return columnData.map((cItem) => <td className='' onClick={(event) => CellSelected(event)} >{cItem}</td>);\r\n}\r\n\r\nfunction Table({tableData, id}) {\r\n    return (\r\n        <table id={id}>\r\n            <TableHeader headerData={tableData.getHeaderData()} />\r\n            <TableRows rowData={tableData.getRowData()} id={id} />\r\n        </table>\r\n    );\r\n}\r\n\r\nfunction TableExercise(props) {\r\n    const tData = new TableData(props.rowCount, props.columnCount);\r\n    tData.setCell(2, 2, 'Altered Cell!');\r\n    tData.setRow(0, 'Altered Rows!');\r\n    tData.setColumn(1, 'Altered Columns!');\r\n    /*\r\n    let buildTable = () => {\r\n        const headerHTML = (hData) => hData.map((hItem) => <th>{hItem}</th>);\r\n        const headerHTML_V2 = () => tData.getHeaderData().map((hItem) => <th>{hItem}</th>);\r\n        const contentHTML = () => {\r\n            const cData = tData.getRowData();\r\n            return cData.map((rItem) => <tr>{rItem.map((cItem) => <td>{cItem}</td>)}</tr>);\r\n        }\r\n        const contentHTML_V2 = () => {\r\n            return rowHTML(tData.getRowData());\r\n        }\r\n        \r\n        const rowHTML = (rData) => rData.map((rItem) => <tr>{columnHTML(rItem)}</tr>);\r\n        const columnHTML = (cData) => cData.map((cItem) => <td>{cItem}</td>);\r\n        \r\n        return (\r\n            <table>\r\n                <TableHeader headerData={tData.getHeaderData()} />\r\n                <TableRows rowData={tData.getRowData()} />\r\n            </table>\r\n        )\r\n    }\r\n    */\r\n    \r\n    return (\r\n        <div id='table-exercise'>\r\n            <Table tableData={tData} id='tb1' />\r\n            <Table tableData={tData} id='tb2' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableExercise;","import Hangman from \"../Hangman/Hangman\";\r\n//import GuessTheNumber from \"../GuessTheNumber\";\r\nimport GuessTheNumberV2 from \"../GuessTheNumber/GuessTheNumberV2\";\r\nimport TableExercise from \"../TableExercise/TableExercise\";\r\n\r\nfunction ComponentDisplay({name}) {\r\n    const GetComponentToDisplay = () => {\r\n        switch (name) {\r\n            case 'guessTheNumber':\r\n                return <GuessTheNumberV2 min={1} max={10} />;\r\n            case 'hangman':\r\n                return <Hangman />; \r\n            case 'TableExercise':\r\n                return  <TableExercise rowCount={5} columnCount={4} />\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className='component-display'>\r\n            {GetComponentToDisplay()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ComponentDisplay;","import { useState } from 'react';\r\n//import Hello from './SayHello';\r\n//import Tweet from './Tweet'\r\n//import GuessTheNumber from './GuessTheNumber';\r\nimport PageHeader from './UI/PageHeader';\r\nimport PageFooter from './UI/PageFooter';\r\nimport ComponentSelection from './UI/ComponentSelection';\r\nimport ComponentDisplay from './UI/ComponentDisplay';\r\n//import logo from './logo.svg';\r\n//import Hangman from './Hangman/Hangman';\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const [componentNameToDisplay, SetComponentNameToDisplay] = useState('guessTheNumber');\r\n  const [theme, setTheme] = useState ('App');\r\n\r\n  const UserSelected = (name) => {\r\n    //console.log(name);\r\n    SetComponentNameToDisplay(name);\r\n  }\r\n\r\n  const ChangeTheme = (value) => {\r\n    if (value) {\r\n      setTheme(prevState => prevState = 'App theme-dark');\r\n      return;\r\n    }\r\n\r\n    setTheme(prevState => prevState = 'App');\r\n  }\r\n  \r\n  return (\r\n    <div className={theme}>\r\n      <PageHeader />\r\n      <div className='main-content'>\r\n        <ComponentSelection names={['guessTheNumber', 'hangman', 'TableExercise']} UserSelectedCallBack={UserSelected} />\r\n        <ComponentDisplay name={componentNameToDisplay} />\r\n      </div>\r\n      <PageFooter ChangeThemeCallBack={ChangeTheme} />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n/*\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <div className='GuessTheNumbers'>\r\n        <GuessTheNumber />\r\n        <GuessTheNumber min={1} max={50} />\r\n        <GuessTheNumber min={1} max={5} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n/*\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <div className='Tweets'>\r\n        <Tweet name='Pure Clickbait' message='Please click me..' likesCount={5670}/>\r\n        <Tweet name='End is near..' message='The world ends at 5pm..' likesCount={120}/>\r\n        <Tweet name='Winter is coming' message='I am the only true king.' likesCount={67900}/>\r\n        <Tweet name='WTF Japan' message='Oh lord...' likesCount={99}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}