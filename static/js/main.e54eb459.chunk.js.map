{"version":3,"sources":["UI/PageHeader.js","UI/ThemeToggler/ThemeToggler.js","UI/PageFooter.js","UI/PageLayout.js","GuessTheNumber/GuessTheNumberV2.js","Hangman/ShowDrawing.js","Hangman/ShowWord.js","Hangman/Keyboard.js","Hangman/Hangman.js","TableExercise/TableData.js","TableExercise/TableExercise.js","App.js","reportWebVitals.js","index.js"],"names":["PageHeader","ThemeToggler","ChangeThemeCallBack","useState","togglerTheme","setTogglerTheme","togglerState","setTogglerState","useEffect","prevState","onClick","event","className","PageFooter","PageLayout","theme","to","GuessTheNumberV2","min","max","randomNumber","undefined","userInput","gameOver","wrongGuesses","feedBack","guessButtonEnabled","gameState","setGameState","GenerateRandomNumber","Math","floor","random","NumberAlreadyGuessed","number","i","length","guessButton","disabled","newGameButton","onChange","Number","target","value","isNaN","IsValidNumber","type","toString","ShowDrawing","imageIndex","src","process","alt","ShowWord","toGuessChars","guessedChars","gameWonCallBack","gameWon","wordShow","charFound","forEach","tgc","gc","CheckQuess","Keyboard","MainCharacterPressed","ButtonPressed","button","id","split","map","char","Hangman","wordToGuess","gameLost","setGamelost","wrongGuessCount","setWrongGuessCount","wChars","setWrongChars","gChars","setGuessedChars","gameOverClassName","setGameOverClassName","gameWonClassName","setGameWonClassName","UpdateButtonColors","UpdateGameState","correctButtonsToUpdate","wrongButtonsToUpdate","document","getElementById","style","backgroundColor","CheckWrongGuessCount","CharFound","character","CharAlreadyGuessed","includes","concat","ReStart","window","location","reload","TableData","rowCount","columnCount","this","header","rows","initCarExample","initDefaultTable","car","row","attribute","c","r","column","isValidRow","isValidColumn","rowNumber","columnNumber","TableHeader","headerData","sorting","HeaderClickedCallBack","hItem","index","columnIndex","TableSortingIcon","sortAscending","ascending","triangleStyle","fill","opacity","viewBox","x","y","rx","ry","width","height","stroke","strokeWidth","d","TableRows","rowData","selectedCell","CellSelectedCallBack","rItem","TableColumns","columnData","cItem","cid","Table","tableData","getHeaderData","getRowData","setRowData","setSelectedCell","setSorting","SortTable","prevRowData","sort","a","b","aValue","toUpperCase","bValue","GetSelectedCellIndexes","rowIndex","prevSorting","TableEdit","cellIndexes","UpdateCellCallBack","selectedCellIndexes","cellValue","setCellValue","onSubmit","preventDefault","TableExercise","props","carData","tData","setCell","setRow","setColumn","App","setTheme","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sSAQeA,MARf,WACI,OACI,iCACI,8D,MCuBGC,MAvBf,YAA8C,IAAvBC,EAAsB,EAAtBA,oBACnB,EAAwCC,mBAAU,iBAAlD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAcA,OAbAC,qBAAU,WAEFH,EADAC,EACgB,SAAAG,GAAS,MAAgB,wCAEzB,SAAAA,GAAS,MAAgB,kBAE7CP,EAAoBI,KACrB,CAACA,EAAcJ,IAOd,sBAAMQ,QALkB,SAACC,GACzBJ,GAAgB,SAAAE,GAAS,OAAiBH,MAINM,UAAWR,EAA/C,SACI,4BCPGS,MAZf,YAA4C,IAAvBX,EAAsB,EAAtBA,oBACjB,OACI,mCACI,+CACA,kCACI,8CACA,cAAC,EAAD,CAAcA,oBAAqBA,WC2BpCY,MA/Bf,YAAmD,IAA9BC,EAA6B,EAA7BA,MAAOb,EAAsB,EAAtBA,oBACxB,OACI,mCACI,sBAAKU,UAAWG,EAAhB,UACI,cAAC,EAAD,IACA,sBAAKH,UAAU,eAAf,UACI,qBAAKA,UAAU,sBAAf,SACI,8BACI,+BACI,6BACI,cAAC,IAAD,CAAMI,GAAG,IAAT,8BAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,UAAT,4BAEJ,6BACI,cAAC,IAAD,CAAMA,GAAG,cAAT,4CAKhB,qBAAKJ,UAAU,oBAAf,SACI,cAAC,IAAD,SAGR,cAAC,EAAD,CAAYV,oBAAqBA,U,cC6GlCe,MAxIf,YAAwC,IAAZC,EAAW,EAAXA,IAAKC,EAAM,EAANA,IAC7B,EAAkChB,oBAAS,WACvC,MAAO,CACHiB,kBAAcC,EACdC,eAAWD,EACXE,UAAU,EACVC,aAAc,GACdC,SAAU,GACVC,oBAAoB,MAP5B,mBAAOC,EAAP,KAAkBC,EAAlB,KAUApB,qBAAU,WACNoB,GAAa,SAAAnB,GACT,OAAO,2BACAA,GADP,IAEIW,aAAcX,EAAUW,aAAeS,EAAqBX,EAAKC,GACjEM,SAAUhB,EAAUgB,SAAW,2BAGxC,CAACP,EAAKC,IAET,IAWMU,EAAuB,SAACX,EAAKC,GAC/B,OAAOW,KAAKC,MAAMD,KAAKE,UAAYb,EAAMD,EAAM,IAAOA,GAcpDe,EAAuB,SAACC,GAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAUH,aAAaY,OAAQD,IAC/C,GAAIR,EAAUH,aAAaW,KAAOD,EAC9B,OAAO,EAEf,OAAO,GAoELG,EAAc,wBAAQ3B,QArCD,WACvB,IAgBIe,EAhBAS,EAASP,EAAUL,UAGnBY,IAAWP,EAAUP,cAerBK,EADAS,EAASP,EAAUP,aACR,mBAEA,oBAEfQ,GAAa,SAAAnB,GACT,OAAO,2BACAA,GADP,IAEIe,aAAa,GAAD,mBAAMf,EAAUe,cAAhB,CAA8BU,IAC1CT,SAAUhB,EAAUgB,SAAWA,EAC/BC,mBAAoBjB,EAAUiB,oBAAqB,QAvBvDE,GAAa,SAAAnB,GACT,OAAO,2BACAA,GADP,IAEIc,SAAUd,EAAUc,UAAW,EAC/BE,SAAUhB,EAAUgB,SAAW,WAC/BC,mBAAoBjB,EAAUiB,oBAAqB,QA2BVY,UAAWX,EAAUD,mBAA1D,wBACda,EAAgB,wBAAQ7B,QALD,WA9FzBkB,EAAa,CACTR,aAAcS,EAAqBX,EAAKC,GACxCG,eAAWD,EACXE,UAAU,EACVC,aAAc,GACdC,SAAU,oBACVC,oBAAoB,KA6FN,sBAEtB,OACG,sBAAKd,UAAU,iBAAf,UACI,0DAA6BM,EAA7B,IAAmCC,KAClC,8CACA,uBAAOqB,SAxEI,SAAC7B,GAEhB,IAAIgB,EAAUJ,SAAd,CAIA,IAAIW,EAASO,OAAO9B,EAAM+B,OAAOC,QAzBf,SAACT,GACnB,OAAIO,OAAOG,MAAMV,MAEbA,EAAShB,GAAOgB,EAASf,KAEzBc,EAAqBC,GAqBpBW,CAAcX,GACfN,GAAa,SAAAnB,GACT,OAAO,2BACAA,GADP,IAEIiB,mBAAoBjB,EAAUiB,oBAAqB,OAO/DE,GAAa,SAAAnB,GACT,OAAO,2BACAA,GADP,IAEIa,UAAWb,EAAUa,UAAYY,EACjCT,SAAUhB,EAAUgB,SAAW,uBAC/BC,mBAAoBjB,EAAUiB,oBAAqB,SAiD1BoB,KAAK,SAAS5B,IAAKA,EAAKC,IAAKA,IACzDQ,EAAUJ,SAAWgB,EAAgBF,EACtC,4BAAIV,EAAUF,WACd,4BAAIE,EAAUH,aAAaY,OAAS,EAAI,oBAAsB,KAC9D,4BAAIT,EAAUH,aAAauB,iBC7HxBC,MARf,YAAoC,IAAdC,EAAa,EAAbA,WAClB,OACI,qBAAKrC,UAAU,cAAf,SACI,qBAAKsC,IAAKC,qCAAsDF,EAAa,OAAQG,IAAI,oBC+BtFC,MAlCf,YAAkE,IAA/CC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,gBACvCC,GAAU,EA0Bd,OACI,qBAAK7C,UAAU,WAAf,SACI,6BA3BW,WACf,IAAI8C,EAAW,GAAIC,GAAY,EAqB/B,OApBAL,EAAaM,SAAQ,SAAAC,GACjBN,EAAaK,SAAQ,SAAAE,GACjB,GAAID,IAAQC,EAGR,OAFAJ,GAAYI,OACZH,GAAY,MAKfA,EAIDA,GAAY,GAHZD,GAAY,IACZD,GAAU,MAMfA,GACCD,IAEGE,EAKEK,QCZFC,MAjBf,YAA2C,IAAxBC,EAAuB,EAAvBA,qBAETC,EAAgB,SAACC,GACnBF,EAAqBE,EAAOzB,OAAO0B,GAAGC,MAAM,KAAK,KAOrD,OACI,qBAAKzD,UAAU,WAAf,SAVqB,qCAMKyD,MAAM,IAAIC,KAAI,SAAAC,GAAI,OAAI,wBAASH,GAAI,UAAYG,EAAM7D,QAASwD,EAAxC,SAAwDK,U,MCuGjGC,MAxGf,WACI,IAAIC,EAAc,aAClB,EAA8BtE,oBAAS,GAAvC,mBAAKuE,EAAL,KAAeC,EAAf,KACIlB,GAAU,EACd,EAA4CtD,mBAAS,GAArD,mBAAKyE,EAAL,KAAsBC,EAAtB,KACA,EAA8B1E,mBAAS,IAAvC,mBAAK2E,EAAL,KAAaC,EAAb,KACA,EAAgC5E,mBAAS,IAAzC,mBAAK6E,EAAL,KAAaC,EAAb,KACA,EAAgD9E,mBAAS,uBAAzD,mBAAK+E,EAAL,KAAwBC,EAAxB,KACA,EAA8ChF,mBAAS,sBAAvD,mBAAKiF,EAAL,KAAuBC,EAAvB,KACA7E,qBAAU,WACN8E,EAAmBN,EAAQF,GAC3BS,OAIJ,IASMD,EAAqB,SAACE,EAAwBC,GAChD,IAAK,IAAItD,EAAI,EAAGA,EAAIqD,EAAuBpD,OAAQD,IAC/CuD,SAASC,eAAe,UAAYH,EAAuBrD,IAAIyD,MAAMC,gBAAkB,QAE3F,IAAK,IAAI1D,EAAI,EAAGA,EAAIsD,EAAqBrD,OAAQD,IAC7CuD,SAASC,eAAe,UAAYF,EAAqBtD,IAAIyD,MAAMC,gBAAkB,OAIvFN,EAAkB,WAChB9B,GACA4B,EAAoB,oBAEpBX,GACAS,EAAqB,sBAYvBW,EAAuB,WACrBlB,GAAmB,GAJvBD,GAAY,IASVoB,EAAY,SAACC,GACXC,EAAmBD,KAGnBvB,EAAYyB,SAASF,GACrBf,GAAgB,SAAAxE,GACZ,OAAOA,EAAU0F,OAAO,CAACH,OAGzBpB,EAAkB,IAClBC,IAAqBD,GACrBG,GAAc,SAAAtE,GACV,OAAOA,EAAU0F,OAAO,CAACH,UAMnCC,EAAqB,SAACD,GACxB,IAAK,IAAI7D,EAAI,EAAGA,EAAI6C,EAAO5C,OAAQD,IAC/B,GAAI6C,EAAO7C,KAAO6D,EACd,OAAO,EAEf,OAAO,GAGLI,EAAU,WACZC,OAAOC,SAASC,QAAO,IAG3B,OACI,sBAAK3F,UAAU,UAAf,UACI,yCACA,cAAC,EAAD,CAAaqC,WAAY2B,EAAgB,IACzC,cAAC,EAAD,CAAUtB,aAAcmB,EAAYJ,MAAM,IAAKd,aAAcyB,EAAQxB,gBAhD7D,WACZC,GAAU,KAgDN,cAAC,EAAD,CAAUQ,qBA5EO,SAAC+B,GAElBvC,GAAWiB,IAGfqB,EAAUC,GACVF,QAuEI,sBAAK1B,GAAG,UAAUxD,UAAWwE,EAA7B,UACI,0CACA,wBAAQ1E,QAAS0F,EAAjB,yBAEJ,sBAAKhC,GAAG,WAAWxD,UAAWsE,EAA9B,UACI,2CACA,wBAAQxE,QAAS0F,EAAjB,6B,gBCJDI,E,WAnGX,WAAY1D,EAAM2D,EAAUC,GAMxB,GANsC,oBACtCC,KAAKF,SAAWA,EAChBE,KAAKD,YAAcA,EACnBC,KAAKC,OAAS,GACdD,KAAKE,KAAO,GAGH,gBADD/D,EAEA6D,KAAKG,sBAGLH,KAAKI,mB,kDAKjB,WAAkB,IAAD,OACbJ,KAAKC,OAAS,CAAC,QAAS,OAAQ,QAAS,gBACzC,IAQIxC,EAAK,EARI,CACT,CAAC,QAAS,KAAM,QAAS,WACzB,CAAC,UAAW,KAAM,QAAS,WAC3B,CAAC,OAAQ,KAAM,OAAQ,WACvB,CAAC,UAAW,KAAM,QAAS,WAC3B,CAAC,SAAU,KAAM,OAAQ,YAKxBR,SAAQ,SAAAoD,GACT,IAAIC,EAAM,GACVD,EAAIpD,SAAQ,SAAAsD,GACRD,EAAIA,EAAI7E,QAAU,CAACgC,GAAIA,EAAGrB,WAAYJ,MAAOuE,GAC7C9C,OAEJ,EAAKyC,KAAK,EAAKA,KAAKzE,QAAU6E,O,8BAItC,WACI,IAAI,IAAIE,EAAE,EAAGA,EAAER,KAAKD,YAAaS,IAC7BR,KAAKC,OAAOO,GAAI,kBAAoBA,EAIxC,IADA,IAAI/C,EAAK,EACDgD,EAAE,EAAEA,EAAET,KAAKF,SAAUW,IAAK,CAE9B,IADA,IAAIH,EAAM,GACFE,EAAE,EAAGA,EAAER,KAAKD,YAAaS,IAC7BF,EAAIE,GAAK,CAAC/C,GAAIA,EAAGrB,WAAYJ,MAAO,gBACpCyB,IAGJuC,KAAKE,KAAKO,GAAKH,K,2BAKvB,WACI,OAAON,KAAKC,S,wBAGhB,WACI,OAAOD,KAAKE,O,qBAGhB,SAAQI,EAAKI,EAAQ1E,GACZgE,KAAKW,WAAWL,IAASN,KAAKY,cAAcF,KAEjDV,KAAKE,KAAKI,GAAKI,GAAQ1E,MAAQA,K,oBAGnC,SAAOsE,EAAKtE,GACR,GAAKgE,KAAKW,WAAWL,GAErB,IAAK,IAAI9E,EAAE,EAAGA,EAAIwE,KAAKE,KAAKI,GAAK7E,OAAQD,IACrCwE,KAAKE,KAAKI,GAAK9E,GAAGQ,MAAQA,I,uBAIlC,SAAU0E,EAAQ1E,GACd,GAAKgE,KAAKY,cAAcF,GAExB,IAAK,IAAID,EAAE,EAAGA,EAAIT,KAAKE,KAAKzE,OAAQgF,IAChCT,KAAKE,KAAKO,GAAGC,GAAQ1E,MAAQA,I,wBAIrC,SAAW6E,GACP,QAAIA,EAAY,GAAKA,GAAab,KAAKF,Y,2BAK3C,SAAcgB,GACV,QAAIA,EAAe,GAAKA,GAAgBd,KAAKD,iB,WCzFrD,SAASgB,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,WAAYvD,EAAqC,EAArCA,GAAIwD,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,sBAC3C,OACI,gCACI,6BACKF,EAAWrD,KAAI,SAACwD,EAAOC,GAAR,OACZ,qBAA4B3D,GAAIA,EAAK,KAAO2D,EAAOrH,QAAS,kBAAMmH,EAAsBE,IAAxF,UACKD,EACAC,IAAUH,EAAQI,aAAe,cAACC,EAAD,CAAkBC,cAAeN,EAAQO,cAFtE/D,EAAK,KAAO2D,UAUzC,SAASE,EAAT,GAA4C,IAAjBC,EAAgB,EAAhBA,cAQjBE,EAAgB,CAClBC,KAAM,oBACNC,QAAS,KAWb,OACI,sBAAKC,QAAQ,cAAb,UACC,sBAAMC,EAAE,IAAIC,EAAE,IAAIC,GAAG,KAAKC,GAAG,KAAKC,MAAM,KAAKC,OAAO,KAAKjD,MAtBvC,CACnByC,KAAM,oBACNS,OAAQ,oBACRC,YAAa,IACbT,QAAS,OAmBRJ,EAVM,sBAAMc,EAAE,yBAAyBpD,MAAOwC,IAIxC,sBAAMY,EAAE,yBAAyBpD,MAAOwC,OAWvD,SAASa,EAAT,GAAuE,IAAnDC,EAAkD,EAAlDA,QAAS9E,EAAyC,EAAzCA,GAAI+E,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,qBAC3C,OACI,gCACKF,EAAQ5E,KAAI,SAAC+E,EAAOtB,GAAR,OAAkB,oBAA4B3D,GAAIA,EAAK,KAAO2D,EAA5C,SAAmD,cAACuB,EAAD,CAAcC,WAAYF,EAAOjF,GAAIA,EAAI+E,aAAcA,EAAcC,qBAAsBA,KAArIhF,EAAK,KAAO2D,QAKhE,SAASuB,EAAT,GAA6E,IAAtDC,EAAqD,EAArDA,WAAYnF,EAAyC,EAAzCA,GAAI+E,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,qBAKjD,OAAOG,EAAWjF,KAAI,SAACkF,GAAD,OAJHC,EAIwBD,EAAMpF,GAJzBzB,EAI6B6G,EAAM7G,MAHhD,oBAA0ByB,GAAIA,EAAK,KAAOqF,EAAK7I,UAAWuI,IAAiBM,EAAM,WAAa,GAAI/I,QAAS,kBAAM0I,EAAqBK,IAAtI,SAA8I9G,GAArIyB,EAAK,KAAOqF,GADd,IAACA,EAAK9G,KAO5B,SAAS+G,EAAT,GAAiC,IAAjBC,EAAgB,EAAhBA,UAAWvF,EAAK,EAALA,GACvB,EAAqBjE,mBAASwJ,EAAUC,iBAAjCjC,EAAP,oBACA,EAA8BxH,mBAASwJ,EAAUE,cAAjD,mBAAOX,EAAP,KAAgBY,EAAhB,KACA,EAAwC3J,mBAAS,KAAjD,mBAAOgJ,EAAP,KAAqBY,EAArB,KACA,EAA8B5J,mBAAS,CAAC6H,YAAa,EAAGG,WAAW,IAAnE,mBAAOP,EAAP,KAAgBoC,EAAhB,KAEAxJ,qBAAU,WACNyJ,EAAUrC,KACX,CAACA,IAEJ,IAAMqC,EAAY,SAACrC,GAEfkC,GAAW,SAAAI,GACP,OAAO,YAAIA,GAAaC,MAAK,SAACC,EAAGC,GAE7B,IAAIC,EAASF,EAAExC,EAAQI,aAAarF,MAAMI,WAAWwH,cACjDC,EAASH,EAAEzC,EAAQI,aAAarF,MAAMI,WAAWwH,cAQrD,OALI9H,OAAO6H,IAAW7H,OAAO+H,KACzBF,EAAS7H,OAAO6H,GAChBE,EAAS/H,OAAO+H,IAGhBF,IAAWE,EACJ,EACPF,EAASE,EACL5C,EAAQO,UACD,GAEC,EAERP,EAAQO,WACA,EAED,SAiCrBsC,EAAyB,SAACvB,GAE5B,IADA,IAAIjC,EACKG,EAAI,EAAGA,EAAI8B,EAAQ9G,OAAQgF,IAAK,CACrCH,EAAMiC,EAAQ9B,GACd,IAAK,IAAID,EAAI,EAAGA,EAAIF,EAAI7E,OAAQ+E,IAC5B,GAAIF,EAAIE,GAAG/C,KAAO+E,EACd,MAAO,CAACuB,SAAUtD,EAAGY,YAAab,GAI9C,MAAO,CAACuD,SAAU,EAAG1C,YAAa,IAsBtC,OACI,qCACA,wBAAO5D,GAAIA,EAAX,UACI,cAACsD,EAAD,CAAaC,WAAYA,EAAYvD,GAAIA,EAAIwD,QAASA,EAASC,sBA1DjD,SAACE,GAEnBiC,GAAW,SAAAW,GACP,OAAO,2BACAA,GADP,IAEI3C,YAAaD,EACbI,WAAYwC,EAAYxC,kBAqD5B,cAACc,EAAD,CAAWC,QAASA,EAAS9E,GAAIA,EAAI+E,aAAcA,EAAcC,qBAhEpD,SAAChF,GAElB2F,EAAgB3F,SAgEhB,cAACwG,EAAD,CAAWjI,MAhDc,WACzB,GAAqB,KAAjBwG,EACA,MAAO,GACX,IACI0B,EAAcJ,EAAuBvB,GAGzC,OAFYA,EAAQ2B,EAAYH,UAAUG,EAAY7C,aAAarF,OA2C3BmI,mBAzBzB,SAACnI,GAChB,IAAIoI,EAAsBN,EAAuBvB,GAC7CwB,EAAWK,EAAoBL,SAC/B1C,EAAc+C,EAAoB/C,YAEtC8B,GAAW,SAAAI,GACP,OAAOA,EAAY5F,KAAI,SAAC+E,EAAOtB,GAC3B,OAAIA,IAAU2C,EAAiBrB,EACxBA,EAAM/E,KAAI,SAACkF,EAAOzB,GACrB,OAAIA,IAAUC,EAAoBwB,EAC3B,2BACFA,GADL,IAEE7G,MAAOA,mBAkB7B,SAASiI,EAAT,GAAiD,IAA7BjI,EAA4B,EAA5BA,MAAOmI,EAAqB,EAArBA,mBACvB,EAAkC3K,mBAASwC,GAA3C,mBAAOqI,EAAP,KAAkBC,EAAlB,KAEAzK,qBAAU,WACNyK,EAAatI,KACd,CAACA,IAQJ,OACI,uBAAMuI,SAPa,SAACvK,GACpBA,EAAMwK,iBAENL,EAAmBE,IAInB,UACI,uDACI,uBACIpK,UAAU,kBACVkC,KAAK,OACLH,MAAOqI,EACPxI,SAAU,SAAC7B,GAAD,OAAWsK,EAAatK,EAAM+B,OAAOC,aAGvD,uBAAOA,MAAM,OAAOG,KAAK,SAASlC,UAAU,kBAyBzCwK,MApBf,SAAuBC,GACnB,IAAMC,EAAU,IAAI9E,EAAU,eACxB+E,EAAQ,IAAI/E,EAAU,KAAM6E,EAAM5E,SAAU4E,EAAM3E,aAUxD,OATA6E,EAAMC,QAAQ,EAAG,EAAG,iBACpBD,EAAME,OAAO,EAAG,iBAChBF,EAAMG,UAAU,EAAG,oBACnBH,EAAMC,QAAQ,EAAG,EAAG,KACpBD,EAAMC,QAAQ,EAAG,EAAG,MACpBD,EAAMC,QAAQ,EAAG,EAAG,MACpBD,EAAMC,QAAQ,EAAG,EAAG,SACpBD,EAAMC,QAAQ,EAAG,EAAG,SAGhB,sBAAKpH,GAAG,iBAAR,UACI,cAACsF,EAAD,CAAOC,UAAW2B,EAASlH,GAAG,QAC9B,cAACsF,EAAD,CAAOC,UAAW4B,EAAOnH,GAAG,Y,MC7HzBuH,MA7Ef,WAEE,MAA0BxL,mBAAU,OAApC,mBAAOY,EAAP,KAAc6K,EAAd,KAkBA,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,CAAY/K,MAAOA,EAAOb,oBAZrC,SAACyC,GAEjBiJ,EADEjJ,EACO,SAAAlC,GAAS,MAAgB,kBAI3B,SAAAA,GAAS,MAAgB,WAM9B,UACE,cAAC,IAAD,CAAOsH,OAAK,EAAC+D,QAAS,cAAC,EAAD,CAAerF,SAAU,EAAGC,YAAa,MAC/D,cAAC,IAAD,CAAOmF,KAAK,UAAUC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOD,KAAK,cAAcC,QAAS,cAAC,EAAD,CAAkB5K,IAAK,EAAGC,IAAK,OAClE,cAAC,IAAD,CAAO0K,KAAK,IAAIC,QAAS,cAAC,EAAD,CAAkB5K,IAAK,EAAGC,IAAK,eChCnD4K,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhH,SAASC,eAAe,SAM1BoG,M","file":"static/js/main.e54eb459.chunk.js","sourcesContent":["function PageHeader() {\r\n    return (\r\n        <header>\r\n            <h2>React Component Exercises</h2>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default PageHeader;","import { useState, useEffect } from 'react';\r\nimport './ThemeToggler.css';\r\n\r\nfunction ThemeToggler({ChangeThemeCallBack}) {\r\n    const [togglerTheme, setTogglerTheme] = useState ('theme-toggler');\r\n    const [togglerState, setTogglerState] = useState(false);\r\n    useEffect(() => {\r\n        if (togglerState)\r\n            setTogglerTheme(prevState => prevState = 'theme-toggler theme-toggler-selected');\r\n        else\r\n            setTogglerTheme(prevState => prevState = 'theme-toggler');\r\n\r\n        ChangeThemeCallBack(togglerState);\r\n    }, [togglerState, ChangeThemeCallBack])\r\n\r\n    const ThemeTogglerClicked = (event) => {\r\n        setTogglerState(prevState => prevState = !togglerState)\r\n    }\r\n\r\n    return (\r\n        <span onClick={ThemeTogglerClicked} className={togglerTheme}>\r\n            <span></span>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default ThemeToggler;\r\n","import ThemeToggler from \"./ThemeToggler/ThemeToggler\";\r\n\r\nfunction PageFooter({ChangeThemeCallBack}) {\r\n    return (\r\n        <footer>\r\n            <h2>TODO Footer..</h2>\r\n            <label>\r\n                <p>Change Theme:</p>\r\n                <ThemeToggler ChangeThemeCallBack={ChangeThemeCallBack} />\r\n            </label>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default PageFooter;","import {Outlet, Link} from 'react-router-dom';\r\nimport PageHeader from './PageHeader';\r\nimport PageFooter from './PageFooter';\r\n\r\nfunction PageLayout({theme, ChangeThemeCallBack}) {\r\n    return (\r\n        <>\r\n            <div className={theme}>\r\n                <PageHeader />\r\n                <div className='main-content'>\r\n                    <div className='component-selection'>\r\n                        <nav>\r\n                            <ul>\r\n                                <li>\r\n                                    <Link to='/'>Table exercise</Link>\r\n                                </li>\r\n                                <li>\r\n                                    <Link to='hangman'>Hangman game</Link>\r\n                                </li>\r\n                                <li>\r\n                                    <Link to='numberguess'>Guess the number game</Link>\r\n                                </li>\r\n                            </ul>\r\n                        </nav>\r\n                    </div>\r\n                    <div className='component-display'>\r\n                        <Outlet />\r\n                    </div>\r\n                </div>\r\n                <PageFooter ChangeThemeCallBack={ChangeThemeCallBack} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PageLayout;","import { useState, useEffect } from 'react';\r\n\r\nfunction GuessTheNumberV2 ({min, max}) {\r\n    const [gameState, setGameState] = useState(() => {\r\n        return {\r\n            randomNumber: undefined,\r\n            userInput: undefined,\r\n            gameOver: false,\r\n            wrongGuesses: [],\r\n            feedBack: '',\r\n            guessButtonEnabled: false\r\n        }\r\n    });\r\n    useEffect(() => {\r\n        setGameState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                randomNumber: prevState.randomNumber = GenerateRandomNumber(min, max),\r\n                feedBack: prevState.feedBack = 'New game started!'\r\n            };\r\n        });\r\n    }, [min, max])\r\n    \r\n    const ResetGame = () => {\r\n        setGameState({\r\n            randomNumber: GenerateRandomNumber(min, max),\r\n            userInput: undefined,\r\n            gameOver: false,\r\n            wrongGuesses: [],\r\n            feedBack: 'New game started!',\r\n            guessButtonEnabled: false\r\n        });\r\n    }\r\n\r\n    const GenerateRandomNumber = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n    }\r\n\r\n    const IsValidNumber = (number) => {\r\n        if (Number.isNaN(number))\r\n            return false;\r\n        if (number < min || number > max)\r\n            return false;\r\n        if (NumberAlreadyGuessed(number))\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    const NumberAlreadyGuessed = (number) => {\r\n        for (let i = 0; i < gameState.wrongGuesses.length; i++) {\r\n            if (gameState.wrongGuesses[i] === number)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const InputGiven = (event) => {\r\n        /* Do not process input when game is over */\r\n        if (gameState.gameOver)\r\n            return;\r\n        \r\n        /* Handle improper input from user */\r\n        let number = Number(event.target.value);\r\n        if (!IsValidNumber(number)) {\r\n            setGameState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    guessButtonEnabled: prevState.guessButtonEnabled = false\r\n                };\r\n            });\r\n            return;\r\n        }\r\n\r\n        /* Handle proper input from user */\r\n        setGameState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                userInput: prevState.userInput = number,\r\n                feedBack: prevState.feedBack = <br/>,\r\n                guessButtonEnabled: prevState.guessButtonEnabled = true\r\n            };\r\n        });\r\n    }\r\n\r\n    const GuessButtonPressed = () => {\r\n        let number = gameState.userInput;\r\n        \r\n        /* Handle correct guess from user */\r\n        if (number === gameState.randomNumber) {\r\n            setGameState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    gameOver: prevState.gameOver = true,\r\n                    feedBack: prevState.feedBack = 'Correct!',\r\n                    guessButtonEnabled: prevState.guessButtonEnabled = false\r\n                };\r\n            });\r\n            return;\r\n        }\r\n        \r\n        /* Handle incorrect guess from user */\r\n        let feedBack\r\n        if (number > gameState.randomNumber)\r\n            feedBack = 'Guess went over.';\r\n        else\r\n            feedBack = 'Guess went under.';\r\n        \r\n        setGameState(prevState => {\r\n            return {\r\n                ...prevState, \r\n                wrongGuesses: [...prevState.wrongGuesses, number], \r\n                feedBack: prevState.feedBack = feedBack,\r\n                guessButtonEnabled: prevState.guessButtonEnabled = false\r\n            };\r\n        })\r\n    }\r\n\r\n    const NewGameButtonPressed = () => {\r\n        ResetGame();\r\n    }\r\n\r\n    const guessButton = <button onClick={GuessButtonPressed} disabled={!gameState.guessButtonEnabled}>Make Guess</button>;\r\n    const newGameButton = <button onClick={NewGameButtonPressed}>New Game</button>;\r\n\r\n    return (\r\n       <div className='GuessTheNumber'>\r\n           <h1>Guess a number beetween {min}-{max}</h1>\r\n            <p>Take a guess:</p>\r\n            <input onChange={InputGiven} type='number' min={min} max={max}></input>\r\n            {gameState.gameOver ? newGameButton : guessButton}\r\n            <p>{gameState.feedBack}</p>\r\n            <p>{gameState.wrongGuesses.length > 0 ? 'Previous guesses:' : ''}</p>\r\n            <p>{gameState.wrongGuesses.toString()}</p>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default GuessTheNumberV2;","function ShowDrawing({imageIndex}) {\r\n    return (\r\n        <div className='ShowDrawing'>\r\n            <img src={process.env.PUBLIC_URL + '/hangman_images/hangman_' + imageIndex + '.png'} alt='hangmanImage'></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowDrawing;","function ShowWord({toGuessChars, guessedChars, gameWonCallBack}) {\r\n    let gameWon = true;\r\n    const CheckQuess = () => {\r\n        let wordShow = '', charFound = false;\r\n        toGuessChars.forEach(tgc => {\r\n            guessedChars.forEach(gc => {\r\n                if (tgc === gc) {\r\n                    wordShow += gc;\r\n                    charFound = true;\r\n                    return\r\n                }\r\n            });\r\n            \r\n            if (!charFound) {\r\n                wordShow += '*';\r\n                gameWon = false;\r\n            } else {\r\n                charFound = false;\r\n            }\r\n        });\r\n\r\n        if(gameWon)\r\n            gameWonCallBack();\r\n        \r\n        return wordShow;\r\n    }\r\n    \r\n    return (\r\n        <div className='ShowWord'>\r\n            <h2>{CheckQuess()}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowWord;","function Keyboard({MainCharacterPressed}) {\r\n    let keyboardCharacters = 'abcdefghijklmnopqrstuvwxyzäö';\r\n    const ButtonPressed = (button) => {\r\n        MainCharacterPressed(button.target.id.split('-')[1]);\r\n    }\r\n    \r\n    const GetButtons = () => {\r\n        return keyboardCharacters.split('').map(char => <button  id={'button-' + char} onClick={ButtonPressed}>{char}</button>);\r\n    }\r\n    \r\n    return (\r\n        <div className='Keyboard'>\r\n            {GetButtons()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Keyboard;","import { useState, useEffect } from 'react';\r\nimport ShowDrawing from './ShowDrawing'\r\nimport ShowWord from './ShowWord';\r\nimport Keyboard from './Keyboard';\r\nimport './Hangman.css';\r\n\r\nfunction Hangman() {\r\n    let wordToGuess = 'hattivatti';\r\n    let [gameLost, setGamelost] = useState(false);\r\n    let gameWon = false;\r\n    let [wrongGuessCount, setWrongGuessCount] = useState(0);\r\n    let [wChars, setWrongChars] = useState([]);\r\n    let [gChars, setGuessedChars] = useState([]);\r\n    let [gameOverClassName, setGameOverClassName] = useState('game-over-invisible');\r\n    let [gameWonClassName, setGameWonClassName] = useState('game-won-invisible');\r\n    useEffect(() => {\r\n        UpdateButtonColors(gChars, wChars);\r\n        UpdateGameState();\r\n    });\r\n\r\n\r\n    const CharacterPressed = (character) => {\r\n        //console.log('Character pressed: ' + character);\r\n        if (gameWon || gameLost)\r\n            return\r\n        \r\n        CharFound(character);\r\n        CheckWrongGuessCount();\r\n    }\r\n\r\n    const UpdateButtonColors = (correctButtonsToUpdate, wrongButtonsToUpdate) => {\r\n        for (let i = 0; i < correctButtonsToUpdate.length; i++ ){\r\n            document.getElementById('button-' + correctButtonsToUpdate[i]).style.backgroundColor = 'green';\r\n        }\r\n        for (let i = 0; i < wrongButtonsToUpdate.length; i++ ){\r\n            document.getElementById('button-' + wrongButtonsToUpdate[i]).style.backgroundColor = 'red';\r\n        }\r\n    }\r\n\r\n    const UpdateGameState = () => {\r\n        if (gameWon) {\r\n            setGameWonClassName('game-won-visible');\r\n        }\r\n        if (gameLost) {\r\n            setGameOverClassName('game-over-visible');\r\n        }            \r\n    }\r\n\r\n    const GameWon = () => {\r\n        gameWon = true;\r\n    }\r\n\r\n    const GameLost = () => {\r\n        setGamelost(true);\r\n    }\r\n\r\n    const CheckWrongGuessCount = () => {\r\n        if (wrongGuessCount >= 9){\r\n            GameLost();\r\n        }\r\n    }\r\n\r\n    const CharFound = (character) => {\r\n        if (CharAlreadyGuessed(character)) \r\n            return\r\n        \r\n        if (wordToGuess.includes(character)) {\r\n            setGuessedChars(prevState => {\r\n                return prevState.concat([character]);\r\n            });\r\n        }else {\r\n            if (wrongGuessCount < 9){\r\n                setWrongGuessCount(++wrongGuessCount);\r\n                setWrongChars(prevState => {\r\n                    return prevState.concat([character]);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const CharAlreadyGuessed = (character) => {\r\n        for (let i = 0; i < gChars.length; i++) {\r\n            if (gChars[i] === character)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const ReStart = () => {\r\n        window.location.reload(false);\r\n    }\r\n\r\n    return(\r\n        <div className='Hangman'>\r\n            <h1>Hangman</h1>\r\n            <ShowDrawing imageIndex={wrongGuessCount+1} />\r\n            <ShowWord toGuessChars={wordToGuess.split('')} guessedChars={gChars} gameWonCallBack={GameWon} />\r\n            <Keyboard MainCharacterPressed={CharacterPressed} />\r\n            <div id='GameWon' className={gameWonClassName}>\r\n                <p>Game Won!</p>\r\n                <button onClick={ReStart}>New Game</button>\r\n            </div>\r\n            <div id='GameOver' className={gameOverClassName}>\r\n                <p>Game Over!</p>\r\n                <button onClick={ReStart}>New Game</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hangman;","class TableData {\r\n    constructor(type, rowCount, columnCount) {\r\n        this.rowCount = rowCount;\r\n        this.columnCount = columnCount;\r\n        this.header = [];\r\n        this.rows = [];\r\n        \r\n        switch (type) {\r\n            case 'car_example':\r\n                this.initCarExample();\r\n                break;\r\n            default:\r\n                this.initDefaultTable();\r\n                break;\r\n        }  \r\n    }\r\n\r\n    initCarExample() {\r\n        this.header = ['Model', 'Year', 'Color', 'Registration'];\r\n        const cars = [\r\n            ['Tesla', 2022, 'White', 'ABC-123'],\r\n            ['Ferrari', 2020, 'Black', 'EFG-456'],\r\n            ['Opel', 1999, 'Blue', 'VVX-111'],\r\n            ['Citroen', 2002, 'White', 'HHJ-223'],\r\n            ['Toyota', 1990, 'Grey', 'YYJ-990']\r\n        ];\r\n\r\n        let id = 0;\r\n        \r\n        cars.forEach(car => {\r\n            let row = [];\r\n            car.forEach(attribute => {\r\n                row[row.length] = {id: id.toString(), value: attribute};\r\n                id++;\r\n            });\r\n            this.rows[this.rows.length] = row;\r\n        });\r\n    }\r\n\r\n    initDefaultTable() {\r\n        for(let c=0; c<this.columnCount; c++) {\r\n            this.header[c] ='Default Header ' + c;\r\n        }\r\n\r\n        let id = 0;\r\n        for(let r=0;r<this.rowCount; r++) {\r\n            let row = [];\r\n            for(let c=0; c<this.columnCount; c++) {\r\n                row[c] = {id: id.toString(), value: 'Default Cell'};\r\n                id++;\r\n            }\r\n            \r\n            this.rows[r] = row; \r\n        }\r\n\r\n    }\r\n\r\n    getHeaderData() {\r\n        return this.header;\r\n    }\r\n\r\n    getRowData() {\r\n        return this.rows;\r\n    }\r\n\r\n    setCell(row, column, value) {\r\n        if (!this.isValidRow(row) || !this.isValidColumn(column))\r\n            return;\r\n        this.rows[row][column].value = value;\r\n    }\r\n\r\n    setRow(row, value) {\r\n        if (!this.isValidRow(row))\r\n            return;\r\n        for (let i=0; i < this.rows[row].length; i++) {\r\n            this.rows[row][i].value = value;\r\n        }       \r\n    }\r\n\r\n    setColumn(column, value) {\r\n        if (!this.isValidColumn(column))\r\n            return;\r\n        for (let r=0; r < this.rows.length; r++) {\r\n            this.rows[r][column].value = value;\r\n        }\r\n    }\r\n\r\n    isValidRow(rowNumber) {\r\n        if (rowNumber < 0 || rowNumber >= this.rowCount)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    isValidColumn(columnNumber) {\r\n        if (columnNumber < 0 || columnNumber >= this.columnCount)\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default TableData;","import {useState, useEffect} from 'react';\r\nimport TableData from \"./TableData\";\r\n//import {ClassName} from \"../Other/HtmlHandlers\";\r\nimport \"./TableExercise.css\";\r\n\r\nfunction TableHeader({headerData, id, sorting, HeaderClickedCallBack}) {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                {headerData.map((hItem, index) => \r\n                    <th key={id + '-h' + index} id={id + '-h' + index} onClick={() => HeaderClickedCallBack(index)}>\r\n                        {hItem}\r\n                        {index === sorting.columnIndex && <TableSortingIcon sortAscending={sorting.ascending} />}\r\n                    </th>\r\n                )}\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nfunction TableSortingIcon({sortAscending}) {\r\n    const rectangleStyle = {\r\n        fill: 'var(--mainColor1)',\r\n        stroke: 'var(--mainColor2)',\r\n        strokeWidth: '5',\r\n        opacity: '1'\r\n    };\r\n\r\n    const triangleStyle = {\r\n        fill: 'var(--mainColor2)',\r\n        opacity: '1'\r\n    };\r\n    \r\n    const triangleUP = () => {\r\n        return <path d=\"M20 80 L50 20 L80 80 Z\" style={triangleStyle} />;\r\n    }\r\n\r\n    const triangleDOWN = () => {\r\n        return <path d=\"M20 20 L50 80 L80 20 Z\" style={triangleStyle} />;\r\n    }\r\n\r\n    return (\r\n        <svg viewBox=\"0 0 100 100\">\r\n    \t    <rect x=\"3\" y=\"3\" rx=\"20\" ry=\"20\" width=\"94\" height=\"94\" style={rectangleStyle} />\r\n  \t\t    {sortAscending ? triangleUP() : triangleDOWN()} \r\n\t    </svg>\r\n    );\r\n}\r\n\r\nfunction TableRows({rowData, id, selectedCell, CellSelectedCallBack}) {\r\n    return (\r\n        <tbody>\r\n            {rowData.map((rItem, index) => <tr key={id + '-r' + index} id={id + '-r' + index}><TableColumns columnData={rItem} id={id} selectedCell={selectedCell} CellSelectedCallBack={CellSelectedCallBack}/></tr>)}\r\n        </tbody>\r\n    );\r\n}\r\n\r\nfunction TableColumns({columnData, id, selectedCell, CellSelectedCallBack}) {\r\n    const tableCell = (cid, value) => {\r\n        return <td key={id + '-c' + cid} id={id + '-c' + cid} className={selectedCell === cid ? 'selected' : ''} onClick={() => CellSelectedCallBack(cid)} >{value}</td>\r\n    }\r\n\r\n    return columnData.map((cItem) => tableCell(cItem.id, cItem.value));\r\n}\r\n\r\nfunction Table({tableData, id}) {\r\n    const [headerData] = useState(tableData.getHeaderData());\r\n    const [rowData, setRowData] = useState(tableData.getRowData());\r\n    const [selectedCell, setSelectedCell] = useState('0');\r\n    const [sorting, setSorting] = useState({columnIndex: 0, ascending: true});\r\n\r\n    useEffect(() => {\r\n        SortTable(sorting);\r\n    }, [sorting]);\r\n    \r\n    const SortTable = (sorting) => {\r\n        //console.log('Sorting table by...: ' + sorting.columnIndex + ' ' + sorting.order);\r\n        setRowData(prevRowData => {\r\n            return [...prevRowData].sort((a, b) => {\r\n                // Sort upper and lower case strings properly.\r\n                let aValue = a[sorting.columnIndex].value.toString().toUpperCase(),\r\n                    bValue = b[sorting.columnIndex].value.toString().toUpperCase();\r\n                \r\n                // Sort numbers properly.\r\n                if (Number(aValue) && Number(bValue)) {\r\n                    aValue = Number(aValue);\r\n                    bValue = Number(bValue);\r\n                }\r\n                   \r\n                if (aValue === bValue)\r\n                    return 0;\r\n                if (aValue > bValue)\r\n                    if (sorting.ascending)\r\n                        return 1;\r\n                    else\r\n                        return -1;\r\n                else\r\n                    if (sorting.ascending)\r\n                        return -1;\r\n                    else\r\n                        return 1;\r\n            });\r\n        });\r\n    }\r\n\r\n    const CellSelected = (id) => {\r\n        //console.log(id);\r\n        setSelectedCell(id);\r\n    }\r\n\r\n    const HeaderClicked = (index) => {\r\n        //console.log(index);\r\n        setSorting(prevSorting => {\r\n            return {\r\n                ...prevSorting,\r\n                columnIndex: index,\r\n                ascending: !prevSorting.ascending\r\n            };\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const GetSelectedCellValue = () => {\r\n        if (selectedCell === '')\r\n            return '';\r\n        let cellValue = '';\r\n        let cellIndexes = GetSelectedCellIndexes(rowData);\r\n        cellValue = rowData[cellIndexes.rowIndex][cellIndexes.columnIndex].value;\r\n        //console.log(cellValue);\r\n        return cellValue;\r\n    }\r\n\r\n    const GetSelectedCellIndexes = (rowData) => {\r\n        let row;\r\n        for (let r = 0; r < rowData.length; r++) {\r\n            row = rowData[r];\r\n            for (let c = 0; c < row.length; c++) {\r\n                if (row[c].id === selectedCell)\r\n                    return {rowIndex: r, columnIndex: c};\r\n            }\r\n        }\r\n\r\n        return {rowIndex: 0, columnIndex: 0};\r\n    }\r\n\r\n    const UpdateCell = (value) => {\r\n        let selectedCellIndexes = GetSelectedCellIndexes(rowData);\r\n        let rowIndex = selectedCellIndexes.rowIndex;\r\n        let columnIndex = selectedCellIndexes.columnIndex;\r\n        \r\n        setRowData(prevRowData => {\r\n            return prevRowData.map((rItem, index) => {\r\n                if (index !== rowIndex) return rItem;\r\n                return rItem.map((cItem, index) => {\r\n                    if (index !== columnIndex) return cItem;\r\n                    return {\r\n                      ...cItem,\r\n                      value: value\r\n                    };\r\n                }) \r\n            })\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <table id={id}>\r\n            <TableHeader headerData={headerData} id={id} sorting={sorting} HeaderClickedCallBack={HeaderClicked} />\r\n            <TableRows rowData={rowData} id={id} selectedCell={selectedCell} CellSelectedCallBack={CellSelected} />\r\n        </table>\r\n        <TableEdit value={GetSelectedCellValue} UpdateCellCallBack={UpdateCell} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction TableEdit({value, UpdateCellCallBack}) {\r\n    const [cellValue, setCellValue] = useState(value);\r\n\r\n    useEffect(() => {\r\n        setCellValue(value);\r\n    }, [value]);\r\n    \r\n    const HandleCellEdit = (event) => {\r\n        event.preventDefault();\r\n        //console.log('Value Submitted: ' + cellValue);\r\n        UpdateCellCallBack(cellValue);\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={HandleCellEdit}>\r\n            <label>Edit Selected Cell\r\n                <input\r\n                    className='cell-edit-field' \r\n                    type='text'\r\n                    value={cellValue}\r\n                    onChange={(event) => setCellValue(event.target.value)}\r\n                />\r\n            </label> \r\n            <input value='Save' type='submit' className='save-input' />\r\n        </form>\r\n    );\r\n}\r\n\r\nfunction TableExercise(props) {\r\n    const carData = new TableData('car_example');\r\n    const tData = new TableData(null, props.rowCount, props.columnCount);\r\n    tData.setCell(2, 2, 'Altered Cell!');\r\n    tData.setRow(0, 'Altered Rows!');\r\n    tData.setColumn(1, 'Altered Columns!');\r\n    tData.setCell(0, 0, '1');\r\n    tData.setCell(1, 0, '20');\r\n    tData.setCell(2, 0, '56');\r\n    tData.setCell(3, 0, '78.45');\r\n    tData.setCell(4, 0, '78.10');\r\n    \r\n    return (\r\n        <div id='table-exercise'>\r\n            <Table tableData={carData} id='tb1' />\r\n            <Table tableData={tData} id='tb2' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableExercise;","import { useState } from 'react';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\n//import Hello from './SayHello';\r\n//import Tweet from './Tweet'\r\n//import GuessTheNumber from './GuessTheNumber';\r\nimport PageLayout from './UI/PageLayout';\r\n//import PageHeader from './UI/PageHeader';\r\n//import PageFooter from './UI/PageFooter';\r\nimport GuessTheNumberV2 from \"./GuessTheNumber/GuessTheNumberV2\";\r\nimport Hangman from './Hangman/Hangman';\r\nimport TableExercise from \"./TableExercise/TableExercise\";\r\n//import ComponentSelection from './UI/ComponentSelection';\r\n//import ComponentDisplay from './UI/ComponentDisplay';\r\n//import logo from './logo.svg';\r\n//import Hangman from './Hangman/Hangman';\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  //const [componentNameToDisplay, SetComponentNameToDisplay] = useState('guessTheNumber');\r\n  const [theme, setTheme] = useState ('App');\r\n\r\n  /*\r\n  const UserSelected = (name) => {\r\n    //console.log(name);\r\n    SetComponentNameToDisplay(name);\r\n  }\r\n  */\r\n\r\n  const ChangeTheme = (value) => {\r\n    if (value) {\r\n      setTheme(prevState => prevState = 'App theme-dark');\r\n      return;\r\n    }\r\n\r\n    setTheme(prevState => prevState = 'App');\r\n  }\r\n  \r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path='/' element={<PageLayout theme={theme} ChangeThemeCallBack={ChangeTheme} />}>\r\n          <Route index element={<TableExercise rowCount={5} columnCount={4} />} />\r\n          <Route path='hangman' element={<Hangman />} />\r\n          <Route path='numberguess' element={<GuessTheNumberV2 min={1} max={10} />} />\r\n          <Route path='*' element={<GuessTheNumberV2 min={1} max={10} />} />\r\n        </Route>\r\n      </Routes>\r\n    </BrowserRouter>\r\n    /*\r\n    <div className={theme}>\r\n      <PageHeader />\r\n      <div className='main-content'>\r\n        <ComponentSelection names={['guessTheNumber', 'hangman', 'TableExercise']} UserSelectedCallBack={UserSelected} />\r\n        <ComponentDisplay name={componentNameToDisplay} />\r\n      </div>\r\n      <PageFooter ChangeThemeCallBack={ChangeTheme} />\r\n    </div>\r\n    */\r\n  );\r\n}\r\n\r\n\r\n/*\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <div className='GuessTheNumbers'>\r\n        <GuessTheNumber />\r\n        <GuessTheNumber min={1} max={50} />\r\n        <GuessTheNumber min={1} max={5} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n/*\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <div className='Tweets'>\r\n        <Tweet name='Pure Clickbait' message='Please click me..' likesCount={5670}/>\r\n        <Tweet name='End is near..' message='The world ends at 5pm..' likesCount={120}/>\r\n        <Tweet name='Winter is coming' message='I am the only true king.' likesCount={67900}/>\r\n        <Tweet name='WTF Japan' message='Oh lord...' likesCount={99}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}