{"version":3,"sources":["UI/PageHeader.js","UI/PageFooter.js","UI/ComponentSelection.js","Hangman/ShowDrawing.js","Hangman/ShowWord.js","Hangman/Keyboard.js","Hangman/Hangman.js","GuessTheNumberGame.js","GuessTheNumber.js","UI/ComponentDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["PageHeader","PageFooter","ComponentSelection","names","UserSelectedCallBack","className","map","name","onClick","ShowDrawing","imageIndex","src","process","alt","ShowWord","toGuessChars","guessedChars","gameWonCallBack","gameWon","wordShow","charFound","forEach","tgc","gc","CheckQuess","Keyboard","MainCharacterPressed","ButtonPressed","button","target","id","split","char","Hangman","wordToGuess","useState","gameLost","setGamelost","wrongGuessCount","setWrongGuessCount","wChars","setWrongChars","gChars","setGuessedChars","gameOverClassName","setGameOverClassName","gameWonClassName","setGameWonClassName","useEffect","UpdateButtonColors","UpdateGameState","correctButtonsToUpdate","wrongButtonsToUpdate","i","length","document","getElementById","style","backgroundColor","CheckWrongGuessCount","CharFound","character","CharAlreadyGuessed","includes","prevState","concat","ReStart","window","location","reload","GuessTheNumberGame","min","max","undefined","this","secretNumber","guessedNumbers","guessedNumbersOutput","output","messageOutput","gameEnded","StartGame","RandomInt","Math","floor","random","number","Number","isNaN","NumberAlreadyGuessed","push","IsValidGuess","GuessTheNumber","gtnGame","setGtnGame","userInput","setUserInput","wrongGuesses","setWrongGuesses","setMessageOutput","onChange","event","value","console","log","CheckIfCorrect","table","defaultProps","ComponentDisplay","GetComponentToDisplay","App","componentNameToDisplay","SetComponentNameToDisplay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.73808e27.chunk.js","sourcesContent":["function PageHeader() {\r\n    return (\r\n        <header>\r\n            <h2>React Component Exercises</h2>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default PageHeader;","function PageFooter() {\r\n    return (\r\n        <header>\r\n            <p>TODO Footer..</p>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default PageFooter;","function ComponentSelection({names, UserSelectedCallBack}) {\r\n    const GetSelections = () => {\r\n        return names.map(name => <div className='selection' onClick={() => UserSelectedCallBack(name)}>{name}</div>);\r\n    }\r\n    \r\n    return (\r\n        <div className='component-selection'>\r\n            {GetSelections()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ComponentSelection;","function ShowDrawing({imageIndex}) {\r\n    return (\r\n        <div className='ShowDrawing'>\r\n            <img src={process.env.PUBLIC_URL + '/hangman_images/hangman_' + imageIndex + '.png'} alt='hangmanImage'></img>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowDrawing;","function ShowWord({toGuessChars, guessedChars, gameWonCallBack}) {\r\n    let gameWon = true;\r\n    const CheckQuess = () => {\r\n        let wordShow = '', charFound = false;\r\n        toGuessChars.forEach(tgc => {\r\n            guessedChars.forEach(gc => {\r\n                if (tgc === gc) {\r\n                    wordShow += gc;\r\n                    charFound = true;\r\n                    return\r\n                }\r\n            });\r\n            \r\n            if (!charFound) {\r\n                wordShow += '*';\r\n                gameWon = false;\r\n            } else {\r\n                charFound = false;\r\n            }\r\n        });\r\n\r\n        if(gameWon)\r\n            gameWonCallBack();\r\n        \r\n        return wordShow;\r\n    }\r\n    \r\n    return (\r\n        <div className='ShowWord'>\r\n            <h2>{CheckQuess()}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowWord;","function Keyboard({MainCharacterPressed}) {\r\n    let keyboardCharacters = 'abcdefghijklmnopqrstuvwxyzäö';\r\n    const ButtonPressed = (button) => {\r\n        MainCharacterPressed(button.target.id.split('-')[1]);\r\n    }\r\n    \r\n    const GetButtons = () => {\r\n        return keyboardCharacters.split('').map(char => <button  id={'button-' + char} onClick={ButtonPressed}>{char}</button>);\r\n    }\r\n    \r\n    return (\r\n        <div className='Keyboard'>\r\n            {GetButtons()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Keyboard;","import { useState, useEffect } from 'react';\r\nimport ShowDrawing from './ShowDrawing'\r\nimport ShowWord from './ShowWord';\r\nimport Keyboard from './Keyboard';\r\nimport './Hangman.css';\r\n\r\nfunction Hangman() {\r\n    let wordToGuess = 'hattivatti';\r\n    let [gameLost, setGamelost] = useState(false);\r\n    let gameWon = false;\r\n    let [wrongGuessCount, setWrongGuessCount] = useState(0);\r\n    let [wChars, setWrongChars] = useState([]);\r\n    let [gChars, setGuessedChars] = useState([]);\r\n    let [gameOverClassName, setGameOverClassName] = useState('game-over-invisible');\r\n    let [gameWonClassName, setGameWonClassName] = useState('game-won-invisible');\r\n    useEffect(() => {\r\n        UpdateButtonColors(gChars, wChars);\r\n        UpdateGameState();\r\n    });\r\n\r\n\r\n    const CharacterPressed = (character) => {\r\n        //console.log('Character pressed: ' + character);\r\n        if (gameWon || gameLost)\r\n            return\r\n        \r\n        CharFound(character);\r\n        CheckWrongGuessCount();\r\n    }\r\n\r\n    const UpdateButtonColors = (correctButtonsToUpdate, wrongButtonsToUpdate) => {\r\n        for (let i = 0; i < correctButtonsToUpdate.length; i++ ){\r\n            document.getElementById('button-' + correctButtonsToUpdate[i]).style.backgroundColor = 'green';\r\n        }\r\n        for (let i = 0; i < wrongButtonsToUpdate.length; i++ ){\r\n            document.getElementById('button-' + wrongButtonsToUpdate[i]).style.backgroundColor = 'red';\r\n        }\r\n    }\r\n\r\n    const UpdateGameState = () => {\r\n        if (gameWon) {\r\n            setGameWonClassName('game-won-visible');\r\n        }\r\n        if (gameLost) {\r\n            setGameOverClassName('game-over-visible');\r\n        }            \r\n    }\r\n\r\n    const GameWon = () => {\r\n        gameWon = true;\r\n    }\r\n\r\n    const GameLost = () => {\r\n        setGamelost(true);\r\n    }\r\n\r\n    const CheckWrongGuessCount = () => {\r\n        if (wrongGuessCount >= 9){\r\n            GameLost();\r\n        }\r\n    }\r\n\r\n    const CharFound = (character) => {\r\n        if (CharAlreadyGuessed(character)) \r\n            return\r\n        \r\n        if (wordToGuess.includes(character)) {\r\n            setGuessedChars(prevState => {\r\n                return prevState.concat([character]);\r\n            });\r\n        }else {\r\n            if (wrongGuessCount < 9){\r\n                setWrongGuessCount(++wrongGuessCount);\r\n                setWrongChars(prevState => {\r\n                    return prevState.concat([character]);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const CharAlreadyGuessed = (character) => {\r\n        for (let i = 0; i < gChars.length; i++) {\r\n            if (gChars[i] === character)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const ReStart = () => {\r\n        window.location.reload(false);\r\n    }\r\n\r\n    return(\r\n        <div className='Hangman'>\r\n            <h1>Hangman</h1>\r\n            <ShowDrawing imageIndex={wrongGuessCount+1} />\r\n            <ShowWord toGuessChars={wordToGuess.split('')} guessedChars={gChars} gameWonCallBack={GameWon} />\r\n            <Keyboard MainCharacterPressed={CharacterPressed} />\r\n            <div id='GameWon' className={gameWonClassName}>\r\n                <p>Game Won!</p>\r\n                <button onClick={ReStart}>New Game</button>\r\n            </div>\r\n            <div id='GameOver' className={gameOverClassName}>\r\n                <p>Game Over!</p>\r\n                <button onClick={ReStart}>New Game</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hangman;","class GuessTheNumberGame {\r\n    constructor(min, max) {\r\n        if (min === undefined || max === undefined) {\r\n            this.min = 1;\r\n            this.max = 100;\r\n        } else {\r\n            this.min = min;\r\n            this.max = max;\r\n        }\r\n        \r\n        this.secretNumber = undefined;\r\n        this.guessedNumbers = [];\r\n        this.guessedNumbersOutput = () => {\r\n            let output = '';\r\n            for (let i=0; i < this.guessedNumbers.length; i++) {\r\n                output += this.guessedNumbers[i] + ' ';\r\n            }\r\n            return output;\r\n        };\r\n        this.messageOutput = '';\r\n        this.gameEnded = false;\r\n        this.StartGame();\r\n    }\r\n\r\n    StartGame() {\r\n        this.secretNumber = this.RandomInt(this.min,this.max);\r\n    }\r\n\r\n    RandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n    }\r\n\r\n    IsValidGuess(number) {\r\n        if (Number.isNaN(number))\r\n            return false;\r\n        if (number < this.min || number > this.max)\r\n            return false;\r\n        if (this.NumberAlreadyGuessed(number))\r\n            return false;\r\n\r\n        this.guessedNumbers.push(number);\r\n        return true;\r\n    }\r\n\r\n    NumberAlreadyGuessed(number) {\r\n        for (let i = 0; i < this.guessedNumbers.length; i++) {\r\n            if (this.guessedNumbers[i] === number)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    CheckIfCorrect(number) {\r\n        number = Number(number);\r\n        if(!this.IsValidGuess(number)){\r\n            return;\r\n        }\r\n\r\n        if (this.secretNumber === number) {\r\n            this.messageOutput = 'Arvausten määrä: ' + this.guessedNumbers.length;\r\n            this.gameEnded = true;\r\n        } else {\r\n            if(this.secretNumber > number){\r\n                this.messageOutput = 'Arvaus meni ali';\r\n            } else {\r\n                this.messageOutput = 'Arvaus meni yli';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default GuessTheNumberGame;","/* \"Import React from 'react'\" no longer needed, unless using class based react component implementation */\r\n//import React, { useState } from 'react';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GuessTheNumberGame from './GuessTheNumberGame';\r\n\r\nfunction GuessTheNumber({min, max}) {\r\n    const [gtnGame, setGtnGame] = useState(new GuessTheNumberGame(min, max));\r\n    const [userInput, setUserInput] = useState('');\r\n    const [wrongGuesses, setWrongGuesses] = useState('');\r\n    const [messageOutput, setMessageOutput] = useState('');\r\n    const onChange = (event) => {\r\n        setUserInput(event.target.value);\r\n        if(gtnGame.gameEnded === true) {\r\n            setGtnGame(new GuessTheNumberGame(min, max));\r\n            setWrongGuesses('');\r\n            setMessageOutput('');\r\n        }\r\n\r\n        console.log('input field changed:' + event.target.value);\r\n    };\r\n    const MakeGuess = () => {\r\n        gtnGame.CheckIfCorrect(userInput);\r\n        setWrongGuesses(gtnGame.guessedNumbersOutput());\r\n        setMessageOutput(gtnGame.messageOutput);\r\n\r\n        console.log('secretNumber:' + gtnGame.secretNumber);\r\n        console.table(gtnGame.guessedNumbers);\r\n    }\r\n\r\n    return (\r\n        <div className='GuessTheNumber'>\r\n            <h1>Arvaa luku väliltä {min}-{max}</h1>\r\n            <p>Arvaus</p>\r\n            <input /*value={userInput}*/ onChange={onChange}></input>\r\n            <button onClick={MakeGuess}>arvaa</button>\r\n            <p>{messageOutput}</p>\r\n            <p>{wrongGuesses}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nGuessTheNumber.defaultProps = {\r\n    min: 1,\r\n    max: 100,\r\n}\r\n\r\nGuessTheNumber.propTypes = {\r\n    min: PropTypes.number.isRequired,\r\n    max: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default GuessTheNumber;","import Hangman from \"../Hangman/Hangman\";\r\nimport GuessTheNumber from \"../GuessTheNumber\";\r\n\r\nfunction ComponentDisplay({name}) {\r\n    const GetComponentToDisplay = () => {\r\n        switch (name) {\r\n            case 'guessTheNumber':\r\n                return <GuessTheNumber min={1} max={5} />;\r\n            case 'hangman':\r\n                return <Hangman />; \r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className='component-display'>\r\n            {GetComponentToDisplay()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ComponentDisplay;","import { useState } from 'react';\r\n//import Hello from './SayHello';\r\n//import Tweet from './Tweet'\r\n//import GuessTheNumber from './GuessTheNumber';\r\nimport PageHeader from './UI/PageHeader';\r\nimport PageFooter from './UI/PageFooter';\r\nimport ComponentSelection from './UI/ComponentSelection';\r\nimport ComponentDisplay from './UI/ComponentDisplay';\r\n//import logo from './logo.svg';\r\n//import Hangman from './Hangman/Hangman';\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const [componentNameToDisplay, SetComponentNameToDisplay] = useState('guessTheNumber');\r\n\r\n  const UserSelected = (name) => {\r\n    //console.log(name);\r\n    SetComponentNameToDisplay(name);\r\n  }\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <PageHeader />\r\n      <div className='main-content'>\r\n        <ComponentSelection names={['guessTheNumber', 'hangman']} UserSelectedCallBack={UserSelected} />\r\n        <ComponentDisplay name={componentNameToDisplay} />\r\n      </div>\r\n      <PageFooter />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n/*\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <div className='GuessTheNumbers'>\r\n        <GuessTheNumber />\r\n        <GuessTheNumber min={1} max={50} />\r\n        <GuessTheNumber min={1} max={5} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n/*\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n      <div className='Tweets'>\r\n        <Tweet name='Pure Clickbait' message='Please click me..' likesCount={5670}/>\r\n        <Tweet name='End is near..' message='The world ends at 5pm..' likesCount={120}/>\r\n        <Tweet name='Winter is coming' message='I am the only true king.' likesCount={67900}/>\r\n        <Tweet name='WTF Japan' message='Oh lord...' likesCount={99}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}